/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/collect/user/pageview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track Pageviews
         * @description Report a pageview without choosing variations for any campaigns.<br>This endpoint has the same effect as calling `choose` with an empty `selector` argument.<br>If you are not sure which server URL you should use, [see here](https://support.dynamicyield.com/hc/en-us/articles/360017534877-Experience-API-Basics).
         */
        post: operations["trackPageviews"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collect/user/engagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track Engagement
         * @description Report user engagement (clicks) with a variation or a recommended item.<br>If you are not sure which server URL you should use, [see here](https://support.dynamicyield.com/hc/en-us/articles/360017534877-Experience-API-Basics).
         */
        post: operations["trackEngagement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collect/user/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Track Events
         * @description Report a predefined or custom event.<br>If you are not sure which server URL you should use, [see here](https://support.dynamicyield.com/hc/en-us/articles/360017534877-Experience-API-Basics).
         */
        post: operations["trackEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/{feedId}/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Product Feed
         * @description Usually, a product feed is updated periodically. However, if you have a large number of products in your feed, updates can take some time. To avoid this, you can use an API to update only the changes in your feed (remove or add specific items, change item properties, and so on), and make changes to the feed more quickly.<br>**Support site article:** [Creating and Syncing a Product Feed Using APIs](https://support.dynamicyield.com/hc/en-us/articles/360038581394-Product-Feeds)
         */
        post: operations["updateProductFeed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/{feedId}/transaction/{transactionId}/item/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track Transaction Status - Specific Item
         * @description Use this API to receive the status of an API call.<br>**Support site article:** [Creating and Syncing a Product Feed Using APIs](https://support.dynamicyield.com/hc/en-us/articles/360038581394-Product-Feeds)
         */
        get: operations["trackTransactionStatusSpecificItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/{feedId}/transaction/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track Transaction Status - Whole Transaction
         * @description Use this API to receive the status of an API call.<br>**Support site article:** [Creating and Syncing a Product Feed Using APIs](https://support.dynamicyield.com/hc/en-us/articles/360038581394-Product-Feeds)
         */
        get: operations["trackTransactionStatusWholeTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/branch/{id}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Branch Feed
         * @description Update the branch level feed state.<br>**USE ONLY FOR RESTAURANT SECTIONS**
         */
        post: operations["updateBranchFeed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/branch/outage/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report Outages
         * @description Report an outage of products in one or more stores.<br>**USE ONLY FOR RESTAURANT SECTIONS**
         */
        post: operations["reportOutages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{feedKey}/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Data API
         * @description The User Data API enables you to update your user data on demand, including partial updates.<br>**Support site article:** [User Data Feed](https://support.dynamicyield.com/hc/en-us/articles/4409595248017-Update-Your-User-Data-Feed-by-API-?_ga=2.258389066.1730957539.1709454788-192163951.1671449880#update-your-user-data-feed-by-api-0-0)
         */
        post: operations["userDataApi"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * External Events
         * @description Track user interaction event using the user's `cuid`. Use in cases where the user's `dyid` is unavailable (e.g. offline activity).
         */
        post: operations["externalEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userprofile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Profile Anywhere
         * @description Retrieve user affinity data generated by Dynamic Yield, enabling you to offer enhanced personalized experiences to your customers across all your touchpoints, both online and offline.<br>**Note:** Rate limit is 50 calls per second.<br>**Support site article:** [Profile Anywhere](https://support.dynamicyield.com/hc/en-us/articles/8126598211229-Profile-Anywhere?_ga=2.9198581.1730957539.1709454788-192163951.1671449880)
         */
        get: operations["profileAnywhere"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Choose Request - E-Commerce */
        ChoosePayloadEcom: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                     * @enum {string}
                     */
                    type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                    /**
                     * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                     * @example 2024-01-01T22:30:00.000-05:00
                     */
                    dateTime?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
                /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                pageAttributes?: {
                    [key: string]: string | number;
                };
                /**
                 * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
                 * @example [
                 *       "SKU1",
                 *       "SKU2"
                 *     ]
                 */
                listedItems?: string[];
                /** @description The branch where the user experience is taking place. */
                branch?: {
                    /** @description The branch's unique identifier. */
                    id: string;
                };
            };
            /**
             * Selector
             * @description Campaigns to choose variations for.
             */
            selector: {
                /**
                 * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                 * @example [
                 *       "Banner Main",
                 *       "German Banner",
                 *       "PDP Recs Tray"
                 *     ]
                 */
                names: string[];
                /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                groups?: string[];
                /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                preview?: {
                    /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                    ids: string[];
                };
                /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                args?: {
                    [key: string]: {
                        /** @description A list of realtime filtering rules. */
                        realtimeRules?: {
                            /**
                             * @description Valid values are: `include`, `exclude`.
                             * @enum {string}
                             */
                            type?: "include" | "exclude";
                            /** @description All or specific slot positions. The first slot is in position 0. */
                            slots?: number[];
                            /** @description The filtering query. */
                            query?: {
                                /** @description The realtime rule's query conditions. */
                                conditions?: {
                                    /**
                                     * @description Field within the returned results to apply the query for.
                                     * @example categories
                                     */
                                    field: string;
                                    /** @description A list of arguments for a query condition. */
                                    arguments: {
                                        /**
                                         * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                         * @enum {string}
                                         */
                                        action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                        /**
                                         * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                         * @example basketball
                                         */
                                        value: unknown;
                                    }[];
                                }[];
                            };
                        }[];
                    };
                };
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                 * @default false
                 */
                isImplicitPageview: boolean;
                /**
                 * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                 * @default false
                 */
                returnAnalyticsMetadata: boolean;
                /**
                 * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
                 * @default true
                 */
                isImplicitImpressionMode: boolean;
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
                /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                recsProductData?: {
                    /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                    fieldFilter?: string[];
                    /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                    skusOnly?: boolean;
                };
            };
        };
        ChoosePayloadFi: unknown & {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                     * @enum {string}
                     */
                    type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                    /**
                     * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                     * @example 2024-01-01T22:30:00.000-05:00
                     */
                    dateTime?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
                /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                pageAttributes?: {
                    [key: string]: string | number;
                };
                /**
                 * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
                 * @example [
                 *       "SKU1",
                 *       "SKU2"
                 *     ]
                 */
                listedItems?: string[];
                /** @description The branch where the user experience is taking place. */
                branch?: {
                    /** @description The branch's unique identifier. */
                    id: string;
                };
            };
            /**
             * Selector
             * @description Campaigns to choose variations for.
             */
            selector: {
                /**
                 * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                 * @example [
                 *       "Banner Main",
                 *       "German Banner",
                 *       "PDP Recs Tray"
                 *     ]
                 */
                names: string[];
                /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                groups?: string[];
                /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                preview?: {
                    /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                    ids: string[];
                };
                /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                args?: {
                    [key: string]: {
                        /** @description A list of realtime filtering rules. */
                        realtimeRules?: {
                            /**
                             * @description Valid values are: `include`, `exclude`.
                             * @enum {string}
                             */
                            type?: "include" | "exclude";
                            /** @description All or specific slot positions. The first slot is in position 0. */
                            slots?: number[];
                            /** @description The filtering query. */
                            query?: {
                                /** @description The realtime rule's query conditions. */
                                conditions?: {
                                    /**
                                     * @description Field within the returned results to apply the query for.
                                     * @example categories
                                     */
                                    field: string;
                                    /** @description A list of arguments for a query condition. */
                                    arguments: {
                                        /**
                                         * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                         * @enum {string}
                                         */
                                        action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                        /**
                                         * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                         * @example basketball
                                         */
                                        value: unknown;
                                    }[];
                                }[];
                            };
                        }[];
                    };
                };
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                 * @default false
                 */
                isImplicitPageview: boolean;
                /**
                 * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                 * @default false
                 */
                returnAnalyticsMetadata: boolean;
                /**
                 * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
                 * @default true
                 */
                isImplicitImpressionMode: boolean;
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
                /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                recsProductData?: {
                    /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                    fieldFilter?: string[];
                    /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                    skusOnly?: boolean;
                };
            };
        };
        /** Choose Request - Restaurants */
        ChoosePayloadQsr: {
            user: {
                /**
                 * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                 * @default true
                 */
                sharedDevice: boolean;
                /** @description User identifier value. Required for identified user flows. */
                cuid?: string;
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.**<br>Required for identified user flows. */
                cuidType?: string;
            } | (unknown & {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            } & {
                /**
                 * @description Set to `false` for transactions made on personal devices.
                 * @default false
                 */
                sharedDevice: boolean;
            });
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page?: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                     * @enum {string}
                     */
                    type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                    /**
                     * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                     * @example 2024-01-01T22:30:00.000-05:00
                     */
                    dateTime: string;
                    /** @description The identifier of the device in the branch. */
                    id?: string;
                };
                /** @description Use to recommend only items in stock at the branch the user is browsing. */
                branch: {
                    /** @description The ID of the branch the recommendation is for. */
                    id?: string;
                    /**
                     * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                     * @enum {string}
                     */
                    dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                    /**
                     * @description The fulfillment type of the order the request relates to.
                     * @enum {string}
                     */
                    orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
                };
                /**
                 * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                 * @enum {string}
                 */
                channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                /** @description Personalize campaigns based on cart state.<br>**Required when basket-based strategies and rules are being used.** */
                cart?: {
                    /** @description The product ID from the restaurant product catalog. */
                    productId: string;
                    /** @description Number of items. */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                    /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                    innerProducts?: {
                        /** @description The product ID from the restaurant product catalog. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                }[];
                /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                pageAttributes?: {
                    [key: string]: string | number;
                };
            };
            /**
             * Selector
             * @description Campaigns to choose variations for.
             */
            selector: {
                /**
                 * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                 * @example [
                 *       "Banner Main",
                 *       "German Banner",
                 *       "PDP Recs Tray"
                 *     ]
                 */
                names: string[];
                /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                groups?: string[];
                /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                preview?: {
                    /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                    ids: string[];
                };
                /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                args?: {
                    [key: string]: {
                        /** @description A list of realtime filtering rules. */
                        realtimeRules?: {
                            /**
                             * @description Valid values are: `include`, `exclude`.
                             * @enum {string}
                             */
                            type?: "include" | "exclude";
                            /** @description All or specific slot positions. The first slot is in position 0. */
                            slots?: number[];
                            /** @description The filtering query. */
                            query?: {
                                /** @description The realtime rule's query conditions. */
                                conditions?: {
                                    /**
                                     * @description Field within the returned results to apply the query for.
                                     * @example categories
                                     */
                                    field: string;
                                    /** @description A list of arguments for a query condition. */
                                    arguments: {
                                        /**
                                         * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                         * @enum {string}
                                         */
                                        action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                        /**
                                         * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                         * @example basketball
                                         */
                                        value: unknown;
                                    }[];
                                }[];
                            };
                        }[];
                    };
                };
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                 * @default false
                 */
                isImplicitPageview: boolean;
                /**
                 * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                 * @default false
                 */
                returnAnalyticsMetadata: boolean;
                /**
                 * @description Report an impression of the chosen variation. For Restaurants, this is set to `false` by default, which means that impressions should be reported explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call. Pass this as `true` in case the user's impression of the variation should be reported immediately when the variation is chosen.
                 * @default false
                 */
                isImplicitImpressionMode: boolean;
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
                /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                recsProductData?: {
                    /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                    fieldFilter?: string[];
                    /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                    skusOnly?: boolean;
                };
            };
        };
        /** Search Request - E-Commerce */
        SearchPayloadEcom: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            query: {
                /** @description The user's input text that specifies what should be searched. */
                text: string;
                /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
                filters?: ({
                    /** @description Column name, as reported in the product feed. */
                    field: string;
                    /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                    min?: number;
                    /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                    max?: number;
                } | {
                    /** @description Column name, as reported in the product feed. */
                    field: string;
                    /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                    values?: string[];
                })[];
                /** @description Pagination parameters for the query result. */
                pagination: {
                    /** @description The number of items to be returned in the query result. */
                    numItems: number;
                    /** @description The starting offset. */
                    offset: number;
                };
            } | {
                /** @description A base64 representation of the input image. */
                imageBase64: string;
                /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
                filters?: ({
                    /** @description Column name, as reported in the product feed. */
                    field: string;
                    /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                    min?: number;
                    /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                    max?: number;
                } | {
                    /** @description Column name, as reported in the product feed. */
                    field: string;
                    /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                    values?: string[];
                })[];
            } | {
                /** @description The user's prompt that specifies a search request, question or an answer. */
                text: string;
                /** @description A unique identifier used to maintain conversational context. Include `chatId` when sending follow-up requests related to the response that contains it. */
                chatId?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                     * @enum {string}
                     */
                    type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                    /**
                     * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                     * @example 2024-01-01T22:30:00.000-05:00
                     */
                    dateTime?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
                /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                pageAttributes?: {
                    [key: string]: string | number;
                };
                /** @description The branch where the user experience is taking place. */
                branch?: {
                    /** @description The branch's unique identifier. */
                    id: string;
                };
            };
            /**
             * Selector
             * @description Campaigns to choose variations for.
             */
            selector: {
                /**
                 * @description The selector name for the applicable search campaign. Must be one of the following:<ul><li>`Semantic Search`</li><li>`Visual Search`</li><li>`Shopping Muse`</li></ul>
                 * @enum {string}
                 */
                name: "Semantic Search" | "Visual Search" | "Shopping Muse";
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                 * @default false
                 */
                returnAnalyticsMetadata: boolean;
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
                /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                recsProductData?: {
                    /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                    fieldFilter?: string[];
                    /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                    skusOnly?: boolean;
                };
            };
        };
        /** Engagement Request - E-Commerce */
        EngagementPayloadEcom: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context?: {
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
            engagements: ({
                /**
                 * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                 * @enum {string}
                 */
                type: "CLICK" | "IMP";
                /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                decisionId: string;
                /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                variations: number[];
            } | {
                /**
                 * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                 * @enum {string}
                 */
                type: "SLOT_CLICK";
                /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                slotId: string;
            } | {
                /**
                 * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                 * @enum {string}
                 */
                type: "PN_CLICK";
                /**
                 * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                 * @example {
                 *       "rri": "987001424",
                 *       "sectionID": "9878785",
                 *       "reqTs": "1652622484055",
                 *       "userID": "4656722918296846673",
                 *       "version": "2",
                 *       "events": [
                 *         {
                 *           "ver": "101482916",
                 *           "expVisitId": "4032971100745578591",
                 *           "smech": "",
                 *           "vars": "[101098971]",
                 *           "exp": "1296028",
                 *           "mech": "1"
                 *         }
                 *       ]
                 *     }
                 */
                trackingData: {
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 987001424
                     */
                    rri?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 9878785
                     */
                    sectionID?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 1652622484055
                     */
                    reqTs?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 4656722918296846673
                     */
                    userID?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 2
                     */
                    version?: string;
                    /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                    events?: {
                        /** @example 101482916 */
                        ver?: string;
                        /** @example 4032971100745578591 */
                        expVisitId?: string;
                        /** @example  */
                        smech?: string;
                        vars?: string[];
                        /** @example 1296028 */
                        exp?: string;
                        /** @example 1 */
                        mech?: string;
                    }[];
                };
            })[];
        };
        EngagementPayloadFi: unknown & {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context?: {
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
            engagements: ({
                /**
                 * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                 * @enum {string}
                 */
                type: "CLICK" | "IMP";
                /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                decisionId: string;
                /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                variations: number[];
            } | {
                /**
                 * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                 * @enum {string}
                 */
                type: "SLOT_CLICK";
                /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                slotId: string;
            } | {
                /**
                 * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                 * @enum {string}
                 */
                type: "PN_CLICK";
                /**
                 * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                 * @example {
                 *       "rri": "987001424",
                 *       "sectionID": "9878785",
                 *       "reqTs": "1652622484055",
                 *       "userID": "4656722918296846673",
                 *       "version": "2",
                 *       "events": [
                 *         {
                 *           "ver": "101482916",
                 *           "expVisitId": "4032971100745578591",
                 *           "smech": "",
                 *           "vars": "[101098971]",
                 *           "exp": "1296028",
                 *           "mech": "1"
                 *         }
                 *       ]
                 *     }
                 */
                trackingData: {
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 987001424
                     */
                    rri?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 9878785
                     */
                    sectionID?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 1652622484055
                     */
                    reqTs?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 4656722918296846673
                     */
                    userID?: string;
                    /**
                     * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                     * @example 2
                     */
                    version?: string;
                    /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                    events?: {
                        /** @example 101482916 */
                        ver?: string;
                        /** @example 4032971100745578591 */
                        expVisitId?: string;
                        /** @example  */
                        smech?: string;
                        vars?: string[];
                        /** @example 1296028 */
                        exp?: string;
                        /** @example 1 */
                        mech?: string;
                    }[];
                };
            })[];
        };
        /** Engagement Request - Restaurants */
        EngagementPayloadQsr: {
            user: {
                /**
                 * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                 * @default true
                 */
                sharedDevice: boolean;
            } | (unknown & {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            } & {
                /**
                 * @description Set to `false` for transactions made on personal devices.
                 * @default false
                 */
                sharedDevice: boolean;
            });
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context?: {
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /** @description Use to recommend only items in stock at the branch the user is browsing. */
                branch: {
                    /** @description The ID of the branch the recommendation is for. */
                    id: string;
                    /**
                     * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                     * @enum {string}
                     */
                    dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                };
                /**
                 * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                 * @enum {string}
                 */
                channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
            };
            /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
            engagements: ({
                /**
                 * @description Pass `SLOT_CLICK`.
                 * @enum {string}
                 */
                type: "SLOT_CLICK";
                /** @description Use to report a click on an API recommendation. Pass the Slot ID for the clicked product as returned in the `/choose` response. */
                slotId: string;
            } | {
                /**
                 * @description Pass `SLOT_IMP`.
                 * @enum {string}
                 */
                type: "SLOT_IMP";
                /** @description Use to report impressions of an API recommendation. Pass the Slot IDs for the products as returned in the `/choose` response. */
                slotIds: string[];
            })[];
        };
        /** Event Request - E-Commerce */
        EventPayloadEcom: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /** @description One or more events to report. */
            events: ({
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `add-to-cart-v1`.
                     * @default add-to-cart-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    quantity: number & unknown;
                    cart?: {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `purchase-v1`.
                     * @default purchase-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 98.8
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /**
                     * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                     * @example 38373991919193830033
                     */
                    uniqueTransactionId?: string;
                    cart: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `remove-from-cart-v1`.
                     * @default remove-from-cart-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    quantity: number & unknown;
                    cart?: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `sync-cart-v1`.
                     * @default sync-cart-v1
                     */
                    dyType: string;
                    value: number & unknown;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    cart: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `identify-v1`.
                     * @default identify-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `login-v1`.
                     * @default login-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /** @description Must be `signup-v1`. */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `newsletter-subscription-v1`.
                     * @default newsletter-subscription-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `message-optin-v1`.
                     * @default message-optin-v1
                     */
                    dyType: string;
                    /**
                     * @description Reports that a user opted in to receive Reconnect push notifications.
                     * @example f7a8c987-7ab5-400f-b989-5357af507343
                     */
                    pushId: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `message-optout-v1`.
                     * @default message-optout-v1
                     */
                    dyType: string;
                    /**
                     * @description Reports that a user opted in to receive Reconnect push notifications.
                     * @example f7a8c987-7ab5-400f-b989-5357af507343
                     */
                    pushId: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `keyword-search-v1`.
                     * @default keyword-search-v1
                     */
                    dyType: string;
                    /**
                     * @description The search string.
                     * @example contact info
                     */
                    keywords: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `add-to-wishlist-v1`.
                     * @default add-to-wishlist-v1
                     */
                    dyType: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    /**
                     * @description Product size.
                     * @example L
                     */
                    size?: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `filter-items-v1`.
                     * @default filter-items-v1
                     */
                    dyType: string;
                    /**
                     * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                     * @example color
                     */
                    filterType: string;
                    /**
                     * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                     * @example 20
                     */
                    filterNumericValue?: number;
                    /**
                     * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                     * @example Gray
                     */
                    filterStringValue?: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `change-attribute-v1`.
                     * @default change-attr-v1
                     */
                    dyType: string;
                    /**
                     * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                     * @example Color
                     */
                    attributeType: string;
                    /**
                     * @description The new value (for example, new color is Gray).
                     * @example Navy Blue
                     */
                    attributeValue: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `video-watch-v1`.
                     * @default video-watch-v1
                     */
                    dyType: string;
                    /**
                     * @description ID that matches an item ID in the content feed.
                     * @example 33849492012003
                     */
                    itemId: string;
                    /**
                     * @description *Optional*
                     * @example [
                     *       "Sports",
                     *       "Baseball"
                     *     ]
                     */
                    categories?: string[];
                    /**
                     * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                     * @default false
                     */
                    autoplay: boolean;
                    /**
                     * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                     * @example VIDEO_STARTED
                     * @enum {string}
                     */
                    progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                    /**
                     * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                     * @example 65
                     */
                    progressPercent: number;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `sort-items-v1`.
                     * @default sort-items-v1
                     */
                    dyType: string;
                    /**
                     * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                     * @example price
                     */
                    sortBy: string;
                    /**
                     * @description `ASC` or `DESC`.
                     * @example ASC
                     */
                    sortOrder: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `enter-promo-code-v1`.
                     * @default enter-promo-code-v1
                     */
                    dyType: string;
                    /**
                     * @description The promo code.
                     * @example SPECIALOFFER
                     */
                    code: string;
                };
            } | {
                /**
                 * @description Event name for display. Does not have a `dyType` property.
                 * @example VIP Login
                 */
                name: string;
                /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                properties?: {
                    /**
                     * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                     * @example 98.7
                     */
                    value?: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                } & {
                    [key: string]: string | number | boolean;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /** @description Must be `inform-affinity-v1`. */
                    dyType: string;
                    /** @description The source of the user data */
                    source?: string;
                    /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                    data: {
                        /** @description name of attribute */
                        attribute?: unknown;
                        values?: string[];
                    }[];
                };
            })[];
        };
        /** Event Request - Financial Institutions */
        EventPayloadFi: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the served device. */
                device?: {
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /** @description One or more events to report. */
            events: ({
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `add-to-cart-v1`.
                     * @default add-to-cart-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    quantity: number & unknown;
                    cart?: {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `purchase-v1`.
                     * @default purchase-v1
                     */
                    dyType: string;
                    value: number & unknown;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /**
                     * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                     * @example 38373991919193830033
                     */
                    uniqueTransactionId?: string;
                    cart: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `remove-from-cart-v1`.
                     * @default remove-from-cart-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    quantity: number & unknown;
                    cart?: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `sync-cart-v1`.
                     * @default sync-cart-v1
                     */
                    dyType: string;
                    value: number & unknown;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    cart: unknown & {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId?: string;
                        /**
                         * @description Number of items.
                         * @example 1
                         */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `identify-v1`.
                     * @default identify-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `login-v1`.
                     * @default login-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /** @description Must be `signup-v1`. */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `newsletter-subscription-v1`.
                     * @default newsletter-subscription-v1
                     */
                    dyType: string;
                    /**
                     * @description User identifier value. Max 250 characters.
                     * @enum {string}
                     */
                    cuid?: "demo@email.com" | "123456789";
                    /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                    cuidType?: string;
                    secondaryIdentifiers?: {
                        /** @example hashedPhoneNumber */
                        type?: string;
                        /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                        value?: string;
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `message-optin-v1`.
                     * @default message-optin-v1
                     */
                    dyType: string;
                    /**
                     * @description Reports that a user opted in to receive Reconnect push notifications.
                     * @example f7a8c987-7ab5-400f-b989-5357af507343
                     */
                    pushId: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `message-optout-v1`.
                     * @default message-optout-v1
                     */
                    dyType: string;
                    /**
                     * @description Reports that a user opted in to receive Reconnect push notifications.
                     * @example f7a8c987-7ab5-400f-b989-5357af507343
                     */
                    pushId: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `keyword-search-v1`.
                     * @default keyword-search-v1
                     */
                    dyType: string;
                    /**
                     * @description The search string.
                     * @example contact info
                     */
                    keywords: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `add-to-wishlist-v1`.
                     * @default add-to-wishlist-v1
                     */
                    dyType: string;
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    /**
                     * @description Product size.
                     * @example L
                     */
                    size?: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `filter-items-v1`.
                     * @default filter-items-v1
                     */
                    dyType: string;
                    /**
                     * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                     * @example color
                     */
                    filterType: string;
                    /**
                     * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                     * @example 20
                     */
                    filterNumericValue?: number;
                    /**
                     * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                     * @example Gray
                     */
                    filterStringValue?: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `change-attribute-v1`.
                     * @default change-attr-v1
                     */
                    dyType: string;
                    /**
                     * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                     * @example Color
                     */
                    attributeType: string;
                    /**
                     * @description The new value (for example, new color is Gray).
                     * @example Navy Blue
                     */
                    attributeValue: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `video-watch-v1`.
                     * @default video-watch-v1
                     */
                    dyType: string;
                    /**
                     * @description ID that matches an item ID in the content feed.
                     * @example 33849492012003
                     */
                    itemId: string;
                    /**
                     * @description *Optional*
                     * @example [
                     *       "Sports",
                     *       "Baseball"
                     *     ]
                     */
                    categories?: string[];
                    /**
                     * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                     * @default false
                     */
                    autoplay: boolean;
                    /**
                     * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                     * @example VIDEO_STARTED
                     * @enum {string}
                     */
                    progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                    /**
                     * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                     * @example 65
                     */
                    progressPercent: number;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `sort-items-v1`.
                     * @default sort-items-v1
                     */
                    dyType: string;
                    /**
                     * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                     * @example price
                     */
                    sortBy: string;
                    /**
                     * @description `ASC` or `DESC`.
                     * @example ASC
                     */
                    sortOrder: string;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `enter-promo-code-v1`.
                     * @default enter-promo-code-v1
                     */
                    dyType: string;
                    /**
                     * @description The promo code.
                     * @example SPECIALOFFER
                     */
                    code: string;
                };
            } | {
                /**
                 * @description Event name for display. Does not have a `dyType` property.
                 * @example VIP Login
                 */
                name: string;
                /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                properties?: {
                    /**
                     * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                     * @example 98.7
                     */
                    value?: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                } & {
                    [key: string]: string | number | boolean;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /** @description Must be `inform-affinity-v1`. */
                    dyType: string;
                    /** @description The source of the user data */
                    source?: string;
                    /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                    data: {
                        /** @description name of attribute */
                        attribute?: unknown;
                        values?: string[];
                    }[];
                };
            })[];
        };
        /** Event Request - Restaurants */
        EventPayloadQsr: {
            user: {
                /**
                 * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                 * @default true
                 */
                sharedDevice: boolean;
            } | (unknown & {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            } & {
                /**
                 * @description Set to `false` for transactions made on personal devices.
                 * @default false
                 */
                sharedDevice: boolean;
            });
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                     * @enum {string}
                     */
                    type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                    /** @description The identifier of the device in the branch. */
                    id?: string;
                    /**
                     * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                     * @example 2024-01-01T22:30:00.000-05:00
                     */
                    dateTime?: string;
                };
                /** @description Use to recommend only items in stock at the branch the user is browsing. */
                branch: {
                    /** @description The ID of the branch the recommendation is for. */
                    id: string;
                    /**
                     * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                     * @enum {string}
                     */
                    dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                    /**
                     * @description The fulfillment type of the order the request relates to.
                     * @enum {string}
                     */
                    orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
                };
                /**
                 * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                 * @enum {string}
                 */
                channel?: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
            };
            /** @description One or more events to report. */
            events: {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /**
                     * @description Must be `purchase-v1`.
                     * @default purchase-v1
                     */
                    dyType: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /**
                     * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                     * @example 38373991919193830033
                     */
                    uniqueTransactionId?: string;
                    cart: unknown & {
                        /** @description The product ID from the restaurant product catalog. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                        /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                        innerProducts?: {
                            /** @description The product ID from the restaurant product catalog. */
                            productId: string;
                            /** @description Number of items. */
                            quantity?: number;
                            /**
                             * @description unit.cents format using the section default currency.
                             * @example 23.99
                             */
                            itemPrice?: number;
                        }[];
                    }[];
                };
            }[];
        };
        /** Pageview Request - E-Commerce */
        PageviewPayloadEcom: {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                     * @enum {string}
                     */
                    type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
            };
        };
        PageviewPayloadFi: unknown & {
            /**
             * User
             * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
             */
            user: {
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid?: string;
                /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                dyid_server?: string;
                /**
                 * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                 * @default false
                 */
                active_consent_accepted: boolean;
            };
            /**
             * Session
             * @description Session ID. A Dynamic Yield-generated identifier is used.
             */
            session: {
                /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                dy?: string;
            };
            /**
             * Context
             * @description The request's context.
             */
            context: {
                /** @description Data for the page currently being browsed. */
                page: {
                    /**
                     * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                     * @example HOMEPAGE
                     * @enum {string}
                     */
                    type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                    /**
                     * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example [
                     *       "p76311-020"
                     *     ]
                     */
                    data?: string[];
                    /**
                     * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                     * @example https://shop.biz/nice-shirt-p76311.html
                     */
                    location: string;
                    /**
                     * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                     * @example https://google.cz
                     */
                    referrer?: string;
                    /**
                     * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                     * @example en_US
                     */
                    locale?: string;
                };
                /** @description Data for the served device. */
                device: {
                    /**
                     * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                     * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                     */
                    userAgent?: string;
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                     * @enum {string}
                     */
                    type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                    /**
                     * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                     * @example Firefox
                     * @enum {string}
                     */
                    browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                    /**
                     * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                     * @example 54.100.200.255
                     */
                    ip?: string;
                };
                /**
                 * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                 * @enum {string}
                 */
                channel?: "WEB" | "APP";
            };
            /**
             * Options
             * @description Request configuration parameters.
             */
            options?: {
                /**
                 * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                 * @default false
                 */
                isImplicitClientData: boolean;
            };
        };
        /**
         * User Data Request
         * @example {
         *       "requests": [
         *         {
         *           "action": "upsert",
         *           "cuid": "0c907031b7d6515ce8def68a767272d0ec7225e987c3e0ce70b985c265f318f0",
         *           "cuidType": "ihe",
         *           "timestamp": "2023-07-02T10:44:44+02:00",
         *           "data": {
         *             "UserSegments": [
         *               "segment 1",
         *               "segment 2"
         *             ]
         *           }
         *         },
         *         {
         *           "action": "delete",
         *           "cuid": "myuser789",
         *           "cuidType": "ihe",
         *           "timestamp": "2022-05-24T12:31:09+02:00"
         *         }
         *       ]
         *     }
         */
        UserDataPayload: {
            /** @description A list of user data update requests to be executed. */
            requests: ({
                /**
                 * @description Use `upsert` to add user data.
                 * @example upsert
                 * @enum {string}
                 */
                action: "upsert";
                cuid: ("demo@email.com" | "123456789") & unknown;
                cuidtype: string & unknown & unknown;
                /**
                 * Format: date-time
                 * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                 * @example 2021-07-24T13:44:17+02:00
                 */
                timestamp: string;
                /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
                data: {
                    [key: string]: unknown;
                };
            } | {
                /**
                 * @description Use `delete` to remove data.
                 * @example delete
                 * @enum {string}
                 */
                action: "delete";
                cuid: ("demo@email.com" | "123456789") & unknown;
                cuidtype: string & unknown & unknown;
                /**
                 * Format: date-time
                 * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                 * @example 2021-07-24T13:44:17+02:00
                 */
                timestamp: string;
            } | {
                /**
                 * @description Use `array_add` and `array_remove` to edit data in existing arrays.
                 * @example array_add
                 * @enum {string}
                 */
                action: "array_add" | "array_remove";
                cuid: ("demo@email.com" | "123456789") & unknown;
                cuidtype: string & unknown & unknown;
                /**
                 * Format: date-time
                 * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                 * @example 2021-07-24T13:44:17+02:00
                 */
                timestamp: string;
                data: {
                    [key: string]: string[];
                } | {
                    [key: string]: number[];
                };
            })[];
        };
        /**
         * External Events Request
         * @example null
         */
        ExternalEventsPayload: {
            /** @description User's identifying details. */
            user: {
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid: "demo@email.com" | "123456789";
                cuidType: string & unknown;
            };
            /** @description Data for the served device. */
            device?: {
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
            };
            /** @description One or more events to report. */
            events: ({
                /** @description A human-readable name corresponding to the schema name. */
                name: string;
                properties: Record<string, never> & {
                    /**
                     * @description Must be `offline-purchase-v1`.
                     * @default offline-purchase-v1
                     * @example offline-purchase-v1
                     */
                    dyType: string;
                    uniqueTransactionId: string & unknown;
                    /**
                     * @description The source where the transaction occurred, usually the physical store ID.
                     * @example f877e8a9dbb
                     */
                    transactionSource?: string;
                    /**
                     * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
                     * @example 2018-09-23T07:29:51+00:00
                     */
                    transactionDatetime: string;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                    /**
                     * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                     * @example 19.9
                     */
                    value: number;
                    cart: {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId: string;
                        /** @description Number of items. */
                        quantity: number;
                        itemPrice: number & unknown;
                        /**
                         * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
                         * @example 23.99
                         */
                        transactionItemValue: number;
                        /**
                         * @description Product size.
                         * @example L
                         */
                        size?: string;
                        /** @description **For restaurants only.** Indicate any inner products within the main product. */
                        innerProducts?: {
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            /** @description Number of items. */
                            quantity?: number;
                            /**
                             * @description unit.cents format using the section default currency.
                             * @example 23.99
                             */
                            itemPrice?: number;
                        }[];
                    }[] & unknown;
                };
            } | {
                /** @description A human-readable name corresponding to the schema name. */
                name?: string;
                properties?: Record<string, never> & {
                    /** @description Must be `inform-affinity-v1`. */
                    dyType: string;
                    /** @description The source of the user data */
                    source?: string;
                    /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                    data: {
                        /** @description name of attribute */
                        attribute?: unknown;
                        values?: string[];
                    }[];
                };
            } | {
                /**
                 * @description Event name for display. Does not have a `dyType` property.
                 * @example VIP Login
                 */
                name: string;
                /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                properties?: {
                    /**
                     * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                     * @example 98.7
                     */
                    value?: number;
                    /**
                     * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                     * @example USD
                     */
                    currency?: string;
                } & {
                    [key: string]: string | number | boolean;
                };
            })[];
        };
        /**
         * Product Feed Request
         * @example {
         *       "requests": [
         *         {
         *           "id": "56EF030B",
         *           "action": "UPDATE",
         *           "body": {
         *             "data": {
         *               "sku": "56EF030B",
         *               "group_id": "abc",
         *               "url": "http://www.example.com/abc-123",
         *               "name": "white sneakers",
         *               "price": 40.9,
         *               "in_stock": true,
         *               "image_url": "http://www.example.com/abc-123.png",
         *               "categories": "shoes|sneakers",
         *               "description": "The white sneakers that everybody wants",
         *               "publish_time": "2018-02-12T17:05:12",
         *               "keywords": "tag1|tag2"
         *             }
         *           }
         *         },
         *         {
         *           "id": "56EF0889",
         *           "action": "DELETE"
         *         }
         *       ]
         *     }
         */
        ProductFeedPayload: {
            /** @description A list of product feed action requests. */
            requests: {
                /** @description SKU exactly as it appears in the product feed. */
                id: string;
                /**
                 * @description Type of action requested. Valid values are:<ul>`update` - Insert a new product or rewrite an entire product’s data<br>`partial` - Update specific fields for a single product<br>`delete` - Delete a product</ul>
                 * @enum {string}
                 */
                action: "update" | "partial" | "delete";
                /** @description Single request body. */
                body?: {
                    /** @description Product data. */
                    data?: {
                        /** @description SKU exactly as it appears in the product feed. */
                        sku?: string;
                        /**
                         * @description Product group ID.
                         * @example abc
                         */
                        group_id?: string;
                        /**
                         * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
                         * @example http://www.example.com/abc-123
                         */
                        url?: string;
                        /**
                         * @description Product name.
                         * @example white sneakers
                         */
                        name?: string;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        price?: number;
                        /**
                         * @description Whether the product is in stock or in outage.
                         * @example true
                         */
                        in_stock?: boolean;
                        /**
                         * @description Product image URL.
                         * @example http://www.example.com/abc-123.png
                         */
                        image_url?: string;
                        /**
                         * @description Categories the product belongs to.
                         * @example shoes|sneakers
                         */
                        categories?: string;
                        /**
                         * @description Product description.
                         * @example The white sneakers that everybody wants
                         */
                        description?: string;
                        /**
                         * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
                         * @example 2018-02-12T17:05:12
                         */
                        publish_time?: string;
                        /**
                         * @description A list of keywords describing the product.
                         * @example tag1|tag2
                         */
                        keywords?: string;
                    } & {
                        [key: string]: unknown;
                    };
                };
            }[];
        };
        /**
         * Branch Feed Update Request - Restaurants
         * @description Availability status and price for each product in a specific branch.
         */
        BranchFeedPayloadQsr: {
            /** @description A list of products to be updated. */
            products: {
                /**
                 * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                 * @example A123
                 */
                sku: string;
                /**
                 * @description Whether the product is available in the specific branch or not. Unavailable products will not be recommended.
                 * @example true
                 */
                availability: boolean;
                /**
                 * @description The price of the product that is used in the specific branch.
                 * @example 3.14
                 */
                price: number;
                /** @description A local variation of the product name, if exists in the specific branch. */
                name?: string;
                /** @description The SKUs of all the products that can be added onto the main product, and the permitted quantities. */
                addons?: {
                    /**
                     * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                     * @example A123
                     */
                    sku: string;
                    /**
                     * @description The default quantity of this ingredient (add on) inside the parent product.
                     * @example 1
                     */
                    default_quantity?: number;
                    /**
                     * @description The minimum quantity of this ingredient (add on) inside the parent product.
                     * @example 0
                     */
                    min_quantity?: number;
                    /**
                     * @description The maximum quantity of this ingredient (add on) inside the parent product.
                     * @example 3
                     */
                    max_quantity?: number;
                    /**
                     * @description The amount from which the QSR is going to charge for the addition of the add on.
                     * @example 1
                     */
                    charge_threshold?: number;
                }[];
            }[];
        };
        /** Outage Request - Restaurants */
        OutagePayloadQsr: {
            /** @description A list of outage reports per branch. */
            outages: {
                /** @description The ID of the branch the recommendation is for. */
                branchId: string;
                /** @description A list of out-of-stock product IDs */
                products: string[];
            }[];
        };
        /** Choice */
        Choice: {
            /** @description The chosen variation for each campaign. */
            choices?: ({
                id?: string;
                name?: string;
                /** @default DECISION */
                type: string;
                variations?: {
                    id?: number;
                    name?: string;
                    payload?: {
                        /** @default CUSTOM_JSON */
                        type: string;
                        data?: Record<string, never>;
                    } | {
                        /** @default CUSTOM_JSON_CONTROL_GROUP_VARIATION */
                        type: string;
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                        variationName?: string;
                    };
                }[];
                groups?: string[];
                decisionId?: string;
                allocationGroup?: string;
            } | {
                id?: string;
                name?: string;
                /** @default RECS_DECISION */
                type: string;
                variations?: {
                    id?: number;
                    name?: string;
                    payload?: {
                        /** @default RECS */
                        type: string;
                        data?: {
                            custom?: Record<string, never>;
                            slots?: {
                                sku?: string;
                                slotId?: string;
                                productData?: Record<string, never>;
                            }[];
                        };
                    } | {
                        /** @default RECS_CONTROL_GROUP_VARIATION */
                        type: string;
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                        variationName?: string;
                    };
                }[];
                groups?: string[];
                decisionId?: string;
                allocationGroup?: string;
            } | {
                id?: string;
                name?: string;
                /** @default STORE_RECS_DECISION */
                type: string;
                variations?: {
                    id?: number;
                    name?: string;
                    payload?: {
                        /** @default STORE_RECS */
                        type: string;
                        data?: Record<string, never>;
                    } | {
                        /** @default STORE_RECS_CONTROL_GROUP_VARIATION */
                        type: string;
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                        variationName?: string;
                    };
                }[];
                groups?: string[];
                decisionId?: string;
                allocationGroup?: string;
            } | {
                name?: string;
                id?: number;
                /** @default SORTING_DECISION */
                type: string;
                decisionId?: string;
                variations?: {
                    id?: number;
                    payload?: {
                        /** @default SORT */
                        type: string;
                        data?: {
                            slots?: {
                                sku?: string;
                                slotId?: string;
                            }[];
                        };
                    } | {
                        /** @default SORT_CONTROL_GROUP_VARIATION */
                        type: string;
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                        variationName?: string;
                    };
                }[];
            })[];
            /** @description Cookies returned from the server. */
            cookies?: {
                name?: string;
                value?: string;
                maxAge?: string;
            }[];
            /** @description Errors returned by the server. */
            warnings?: {
                code?: string;
                message?: string;
            }[];
        };
        /** Query Results */
        QueryResults: {
            /** @description The chosen variation for each campaign. */
            choices?: ({
                id?: string;
                /** @default Semantic Search */
                name: string;
                /** @default SEMANTIC_SEARCH_DECISION */
                type: string;
                variations?: {
                    id?: number;
                    payload?: {
                        /** @default SEARCH */
                        type: string;
                        data?: {
                            totalNumResults?: number;
                            facets?: ({
                                column?: string;
                                /** @enum {string} */
                                valuesType?: "string";
                                displayName?: string;
                                values?: {
                                    name?: string;
                                    count?: number;
                                }[];
                            } | {
                                column?: string;
                                /** @enum {string} */
                                valuesType?: "number";
                                displayName?: string;
                                min?: number;
                                max?: number;
                            })[];
                            slots?: {
                                slotId?: string;
                                sku?: string;
                            }[];
                        };
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        variationName?: string;
                    };
                }[];
                decisionId?: string;
            } | {
                id?: string;
                /** @default Visual Search */
                name: string;
                /** @default VISUAL_SEARCH_DECISION */
                type: string;
                variations?: {
                    id?: number;
                    payload?: {
                        /** @default SEARCH */
                        type: string;
                        data?: {
                            totalNumResults?: number;
                            facets?: ({
                                column?: string;
                                /** @enum {string} */
                                valuesType?: "string";
                                displayName?: string;
                                values?: {
                                    name?: string;
                                    count?: number;
                                }[];
                            } | {
                                column?: string;
                                /** @enum {string} */
                                valuesType?: "number";
                                displayName?: string;
                                min?: number;
                                max?: number;
                            })[];
                            slots?: {
                                slotId?: string;
                                sku?: string;
                            }[];
                        };
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        variationName?: string;
                    };
                }[];
                decisionId?: string;
            } | {
                id?: string;
                /** @default Shopping Muse */
                name: string;
                /** @default SHOPPING_MUSE_DECISION */
                type: string;
                variations?: {
                    id?: number;
                    payload?: {
                        /** @default SHOPPING_MUSE */
                        type: string;
                        data?: {
                            assistant?: string;
                            widgets?: {
                                title?: string;
                                slots?: {
                                    sku?: string;
                                    slotId?: string;
                                    productData?: Record<string, never>;
                                }[];
                            }[];
                            support?: boolean;
                            chatId?: string;
                        };
                    };
                    analyticsMetadata?: {
                        campaignId?: number;
                        campaignName?: string;
                        experienceId?: number;
                        experienceName?: string;
                        variationId?: number;
                        variationName?: string;
                    };
                }[];
                decisionId?: string;
            })[];
            /** @description Cookies returned from the server. */
            cookies?: {
                name?: string;
                value?: string;
                maxAge?: string;
            }[];
            /** @description Errors returned by the server. */
            warnings?: {
                code?: string;
                message?: string;
            }[];
        };
        /** Product Feed Update */
        ProductFeedUpdate: {
            /**
             * @description The update request's success status.
             * @example true
             */
            success?: boolean;
            /** @description Response body. */
            data?: {
                /**
                 * @description The ID for the update transaction. A transaction includes all individual items for which an update was requested.
                 * @example 3754b085584be8561926dabc32b359a0
                 */
                transaction_id?: string;
            };
        };
        /** Transaction Status - Specific Item */
        TransactionStatusSpecificItem: {
            /**
             * @description The request item's ID.
             * @example abc-123
             */
            item?: string;
            /**
             * @description Whether the item has been successfully updated.
             * @example success
             */
            status?: string;
            /**
             * @description Timestamp for most recent status change.
             * @example 2023-03-30T08:20:35.827+0000
             */
            time?: string;
        } & {
            [key: string]: unknown;
        };
        /** Transaction Status */
        TransactionStatus: ({
            /**
             * @description The request item's ID.
             * @example abc-123
             */
            item?: string;
            /**
             * @description Whether the item has been successfully updated.
             * @example success
             */
            status?: string;
            /**
             * @description Timestamp for most recent status change.
             * @example 2023-03-30T08:20:35.827+0000
             */
            time?: string;
        } & {
            [key: string]: unknown;
        })[];
        /** @description Response object for an invalid request. */
        Error: {
            /**
             * @description Error description.
             * @example request must contain context page location
             */
            message?: string;
            /**
             * @description The type of error encountered.
             * @example badRequest
             */
            type?: string;
        };
        /**
         * @description Error description.
         * @example request must contain context page location
         */
        ErrorMessage: string;
        /**
         * @description The type of error encountered.
         * @example badRequest
         */
        ErrorType: string;
        /** Payload */
        ResponseDecisionVariationItemPayload: {
            /** @default CUSTOM_JSON */
            type: string;
            data?: Record<string, never>;
        };
        /** Control Group Payload */
        ResponseDecisionCGVariationItemPayload: {
            /** @default CUSTOM_JSON_CONTROL_GROUP_VARIATION */
            type: string;
        };
        /** Payload */
        ResponseRecsVariationItemPayload: {
            /** @default RECS */
            type: string;
            data?: {
                custom?: Record<string, never>;
                slots?: {
                    sku?: string;
                    slotId?: string;
                    productData?: Record<string, never>;
                }[];
            };
        };
        /** Control Group Payload */
        ResponseRecsCGVariationItemPayload: {
            /** @default RECS_CONTROL_GROUP_VARIATION */
            type: string;
        };
        /** Payload */
        ResponseSortVariationItemPayload: {
            /** @default SORT */
            type: string;
            data?: {
                slots?: {
                    sku?: string;
                    slotId?: string;
                }[];
            };
        };
        /** Control Group Payload */
        ResponseSortCGVariationItemPayload: {
            /** @default SORT_CONTROL_GROUP_VARIATION */
            type: string;
        };
        /** Payload */
        ResponseStoreRecsVariationItemPayload: {
            /** @default STORE_RECS */
            type: string;
            data?: Record<string, never>;
        };
        /** Control Group Payload */
        ResponseStoreRecsCGVariationItemPayload: {
            /** @default STORE_RECS_CONTROL_GROUP_VARIATION */
            type: string;
        };
        /**
         * User
         * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
         */
        EngagementUserEcom: {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        };
        UserQsr: {
            /**
             * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
             * @default true
             */
            sharedDevice: boolean;
        } | (unknown & {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        } & {
            /**
             * @description Set to `false` for transactions made on personal devices.
             * @default false
             */
            sharedDevice: boolean;
        });
        /**
         * User
         * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
         */
        ChooseUserEcom: {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        };
        ChooseUserQsr: {
            /**
             * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
             * @default true
             */
            sharedDevice: boolean;
            /** @description User identifier value. Required for identified user flows. */
            cuid?: string;
            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.**<br>Required for identified user flows. */
            cuidType?: string;
        } | (unknown & {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        } & {
            /**
             * @description Set to `false` for transactions made on personal devices.
             * @default false
             */
            sharedDevice: boolean;
        });
        /**
         * User (sharedDevice: true)
         * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
         */
        UserQsrSharedDeviceTrue: {
            /**
             * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
             * @default true
             */
            sharedDevice: boolean;
        };
        UserQsrSharedDeviceFalse: unknown & {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        } & {
            /**
             * @description Set to `false` for transactions made on personal devices.
             * @default false
             */
            sharedDevice: boolean;
        };
        /**
         * User (sharedDevice: true)
         * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
         */
        ChooseUserQsrSharedDeviceTrue: {
            /**
             * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
             * @default true
             */
            sharedDevice: boolean;
            /** @description User identifier value. Required for identified user flows. */
            cuid?: string;
            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.**<br>Required for identified user flows. */
            cuidType?: string;
        };
        ChooseUserQsrSharedDeviceFalse: unknown & {
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid?: string;
            /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
            dyid_server?: string;
            /**
             * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
             * @default false
             */
            active_consent_accepted: boolean;
        } & {
            /**
             * @description Set to `false` for transactions made on personal devices.
             * @default false
             */
            sharedDevice: boolean;
        };
        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
        Dyid: string;
        /**
         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
         * @default false
         */
        ActiveConsentAccepted: boolean;
        /**
         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
         * @default true
         */
        SharedDeviceTrue: boolean;
        /**
         * @description Set to `false` for transactions made on personal devices.
         * @default false
         */
        SharedDeviceFalse: boolean;
        /**
         * @description User identifier value. Max 250 characters.
         * @enum {string}
         */
        Cuid: "demo@email.com" | "123456789";
        /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
        CuidType: string;
        /** @description SHA-256 encoding of the lowercase email address. You can use this identifier type instead of `cuid` and `cuidType`. */
        HashedEmail: string;
        /** @description A valid plain text email address.<br>Use either `plainTextEmail` OR `externalId`, not both.<br>This API uses plain text email addresses because we use the addresses for triggered emails and audience exports. Hashing only works one way, and PII data can't be decrypted.<br>*Required for `cuidType: email`* */
        PlainTextEmail: string;
        /** @description Use this identifier type to identify users for the SMS channel in Reconnect campaigns. */
        PhoneNumber: string;
        SecondaryIdentifiers: {
            /** @example hashedPhoneNumber */
            type?: string;
            /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
            value?: string;
        }[];
        /** @description The external ID used to identify the user. Your ESP must be able to recognize this ID and map it to an email address.<br>Use either `plainTextEmail` OR `externalId`, not both.<br>**Note:** The external ID type is supported only by custom ESP and Emarsys integrations (and not by SendGrid or Responsys, for example).<br>*Required for `cuidType: external`* */
        ExternalId: string;
        /**
         * Session
         * @description Session ID. A Dynamic Yield-generated identifier is used.
         */
        Session: {
            /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
            dy?: string;
        };
        /**
         * Session
         * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
         */
        SessionChoose: {
            /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
            dy?: string;
        };
        /**
         * Session
         * @description Session ID. A Dynamic Yield-generated identifier is used.
         */
        SessionEngagement: {
            /** @description Pass the value of the `_dyjsession` cookie if it exists. */
            dy?: string;
        };
        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
        Dy: string;
        /**
         * Context
         * @description The request's context.
         */
        ContextChooseEcom: {
            /** @description Data for the page currently being browsed. */
            page: {
                /**
                 * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                 * @example HOMEPAGE
                 * @enum {string}
                 */
                type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                /**
                 * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example [
                 *       "p76311-020"
                 *     ]
                 */
                data?: string[];
                /**
                 * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                 * @example https://shop.biz/nice-shirt-p76311.html
                 */
                location: string;
                /**
                 * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                 * @example https://google.cz
                 */
                referrer?: string;
                /**
                 * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example en_US
                 */
                locale?: string;
            };
            /** @description Data for the served device. */
            device: {
                /**
                 * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                 * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                 */
                userAgent?: string;
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                 * @enum {string}
                 */
                type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                 * @example Firefox
                 * @enum {string}
                 */
                browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
                /**
                 * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                 * @example 2024-01-01T22:30:00.000-05:00
                 */
                dateTime?: string;
            };
            /**
             * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
             * @enum {string}
             */
            channel?: "WEB" | "APP";
            /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
            pageAttributes?: {
                [key: string]: string | number;
            };
            /**
             * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
             * @example [
             *       "SKU1",
             *       "SKU2"
             *     ]
             */
            listedItems?: string[];
            /** @description The branch where the user experience is taking place. */
            branch?: {
                /** @description The branch's unique identifier. */
                id: string;
            };
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextChooseQsr: {
            /** @description Data for the page currently being browsed. */
            page?: {
                /**
                 * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                 * @example HOMEPAGE
                 * @enum {string}
                 */
                type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                /**
                 * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example [
                 *       "p76311-020"
                 *     ]
                 */
                data?: string[];
                /**
                 * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                 * @example https://shop.biz/nice-shirt-p76311.html
                 */
                location: string;
                /**
                 * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                 * @example https://google.cz
                 */
                referrer?: string;
                /**
                 * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example en_US
                 */
                locale?: string;
            };
            /** @description Data for the served device. */
            device?: {
                /**
                 * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                 * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                 */
                userAgent?: string;
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                 * @enum {string}
                 */
                type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                 * @example Firefox
                 * @enum {string}
                 */
                browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
                /**
                 * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                 * @example 2024-01-01T22:30:00.000-05:00
                 */
                dateTime: string;
                /** @description The identifier of the device in the branch. */
                id?: string;
            };
            /** @description Use to recommend only items in stock at the branch the user is browsing. */
            branch: {
                /** @description The ID of the branch the recommendation is for. */
                id?: string;
                /**
                 * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                 * @enum {string}
                 */
                dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                /**
                 * @description The fulfillment type of the order the request relates to.
                 * @enum {string}
                 */
                orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
            };
            /**
             * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
             * @enum {string}
             */
            channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
            /** @description Personalize campaigns based on cart state.<br>**Required when basket-based strategies and rules are being used.** */
            cart?: {
                /** @description The product ID from the restaurant product catalog. */
                productId: string;
                /** @description Number of items. */
                quantity?: number;
                /**
                 * @description unit.cents format using the section default currency.
                 * @example 23.99
                 */
                itemPrice?: number;
                /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                innerProducts?: {
                    /** @description The product ID from the restaurant product catalog. */
                    productId: string;
                    /** @description Number of items. */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            }[];
            /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
            pageAttributes?: {
                [key: string]: string | number;
            };
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextSearchEcom: {
            /** @description Data for the page currently being browsed. */
            page: {
                /**
                 * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                 * @example HOMEPAGE
                 * @enum {string}
                 */
                type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                /**
                 * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example [
                 *       "p76311-020"
                 *     ]
                 */
                data?: string[];
                /**
                 * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                 * @example https://shop.biz/nice-shirt-p76311.html
                 */
                location: string;
                /**
                 * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                 * @example https://google.cz
                 */
                referrer?: string;
                /**
                 * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example en_US
                 */
                locale?: string;
            };
            /** @description Data for the served device. */
            device: {
                /**
                 * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                 * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                 */
                userAgent?: string;
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                 * @enum {string}
                 */
                type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                 * @example Firefox
                 * @enum {string}
                 */
                browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
                /**
                 * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                 * @example 2024-01-01T22:30:00.000-05:00
                 */
                dateTime?: string;
            };
            /**
             * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
             * @enum {string}
             */
            channel?: "WEB" | "APP";
            /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
            pageAttributes?: {
                [key: string]: string | number;
            };
            /** @description The branch where the user experience is taking place. */
            branch?: {
                /** @description The branch's unique identifier. */
                id: string;
            };
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextEngagementEcom: {
            /** @description Data for the served device. */
            device?: {
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
            };
            /**
             * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
             * @enum {string}
             */
            channel?: "WEB" | "APP";
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextEngagementQsr: {
            /** @description Data for the served device. */
            device?: {
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
            };
            /** @description Use to recommend only items in stock at the branch the user is browsing. */
            branch: {
                /** @description The ID of the branch the recommendation is for. */
                id: string;
                /**
                 * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                 * @enum {string}
                 */
                dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
            };
            /**
             * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
             * @enum {string}
             */
            channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextEventQsr: {
            /** @description Data for the served device. */
            device: {
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                 * @enum {string}
                 */
                type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
                /** @description The identifier of the device in the branch. */
                id?: string;
                /**
                 * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                 * @example 2024-01-01T22:30:00.000-05:00
                 */
                dateTime?: string;
            };
            /** @description Use to recommend only items in stock at the branch the user is browsing. */
            branch: {
                /** @description The ID of the branch the recommendation is for. */
                id: string;
                /**
                 * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                 * @enum {string}
                 */
                dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                /**
                 * @description The fulfillment type of the order the request relates to.
                 * @enum {string}
                 */
                orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
            };
            /**
             * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
             * @enum {string}
             */
            channel?: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
        };
        /**
         * Context
         * @description The request's context.
         */
        ContextPageviewEcom: {
            /** @description Data for the page currently being browsed. */
            page: {
                /**
                 * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                 * @example HOMEPAGE
                 * @enum {string}
                 */
                type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                /**
                 * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example [
                 *       "p76311-020"
                 *     ]
                 */
                data?: string[];
                /**
                 * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                 * @example https://shop.biz/nice-shirt-p76311.html
                 */
                location: string;
                /**
                 * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                 * @example https://google.cz
                 */
                referrer?: string;
                /**
                 * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                 * @example en_US
                 */
                locale?: string;
            };
            /** @description Data for the served device. */
            device: {
                /**
                 * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                 * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                 */
                userAgent?: string;
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                 * @enum {string}
                 */
                type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                /**
                 * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                 * @example Firefox
                 * @enum {string}
                 */
                browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                /**
                 * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                 * @example 54.100.200.255
                 */
                ip?: string;
            };
            /**
             * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
             * @enum {string}
             */
            channel?: "WEB" | "APP";
        };
        /** @description Data for the page currently being browsed. */
        Page: {
            /**
             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
             * @example HOMEPAGE
             * @enum {string}
             */
            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
            /**
             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
             * @example [
             *       "p76311-020"
             *     ]
             */
            data?: string[];
            /**
             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
             * @example https://shop.biz/nice-shirt-p76311.html
             */
            location: string;
            /**
             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
             * @example https://google.cz
             */
            referrer?: string;
            /**
             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
             * @example en_US
             */
            locale?: string;
        };
        /**
         * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
         * @example HOMEPAGE
         * @enum {string}
         */
        PageType: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
        /**
         * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
         * @example [
         *       "p76311-020"
         *     ]
         */
        PageData: string[];
        /**
         * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
         * @example https://shop.biz/nice-shirt-p76311.html
         */
        Location: string;
        /**
         * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
         * @example https://google.cz
         */
        Referrer: string;
        /**
         * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
         * @example en_US
         */
        Locale: string;
        /** @description Data for the served device. */
        DeviceChooseEcom: {
            /**
             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
             */
            userAgent?: string;
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
             * @enum {string}
             */
            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
             * @example Firefox
             * @enum {string}
             */
            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
            /**
             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
             * @example 54.100.200.255
             */
            ip?: string;
            /**
             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
             * @example 2024-01-01T22:30:00.000-05:00
             */
            dateTime?: string;
        };
        /** @description Data for the served device. */
        DeviceChooseQsr: {
            /**
             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
             */
            userAgent?: string;
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
             * @enum {string}
             */
            type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
             * @example Firefox
             * @enum {string}
             */
            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
            /**
             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
             * @example 54.100.200.255
             */
            ip?: string;
            /**
             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
             * @example 2024-01-01T22:30:00.000-05:00
             */
            dateTime: string;
            /** @description The identifier of the device in the branch. */
            id?: string;
        };
        /** @description Data for the served device. */
        DeviceEngagement: {
            /**
             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
             * @example 54.100.200.255
             */
            ip?: string;
        };
        /** @description Data for the served device. */
        DeviceEventQsr: {
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
             * @enum {string}
             */
            type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
            /**
             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
             * @example 54.100.200.255
             */
            ip?: string;
            /** @description The identifier of the device in the branch. */
            id?: string;
            /**
             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
             * @example 2024-01-01T22:30:00.000-05:00
             */
            dateTime?: string;
        };
        /** @description Data for the served device. */
        DevicePageviewEcom: {
            /**
             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
             */
            userAgent?: string;
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
             * @enum {string}
             */
            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
            /**
             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
             * @example Firefox
             * @enum {string}
             */
            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
            /**
             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
             * @example 54.100.200.255
             */
            ip?: string;
        };
        /**
         * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
         * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
         */
        UserAgent: string;
        /**
         * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
         * @enum {string}
         */
        DeviceTypeEcom: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
        /**
         * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
         * @enum {string}
         */
        DeviceTypeQsr: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
        /**
         * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
         * @example Firefox
         * @enum {string}
         */
        Browser: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
        /**
         * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
         * @example 54.100.200.255
         */
        Ip: string;
        /**
         * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
         * @example 2024-01-01T22:30:00.000-05:00
         */
        DateTime: string;
        /** @description The identifier of the device in the branch. */
        DeviceIdQsr: string;
        /**
         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
         * @enum {string}
         */
        ChannelEcom: "WEB" | "APP";
        /**
         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
         * @enum {string}
         */
        ChannelQsr: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
        /** @description The branch where the user experience is taking place. */
        BranchEcom: {
            /** @description The branch's unique identifier. */
            id: string;
        };
        /** @description Use to recommend only items in stock at the branch the user is browsing. */
        BranchQsr: {
            /** @description The ID of the branch the recommendation is for. */
            id?: string;
            /**
             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
             * @enum {string}
             */
            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
            /**
             * @description The fulfillment type of the order the request relates to.
             * @enum {string}
             */
            orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
        };
        /** @description Use to recommend only items in stock at the branch the user is browsing. */
        BranchQsrEngagement: {
            /** @description The ID of the branch the recommendation is for. */
            id: string;
            /**
             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
             * @enum {string}
             */
            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
        };
        /** @description Use to recommend only items in stock at the branch the user is browsing. */
        BranchQsrPurchase: {
            /** @description The ID of the branch the recommendation is for. */
            id: string;
            /**
             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
             * @enum {string}
             */
            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
            /**
             * @description The fulfillment type of the order the request relates to.
             * @enum {string}
             */
            orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
        };
        /** @description The branch's unique identifier. */
        BranchIdEcom: string;
        /** @description The ID of the branch the recommendation is for. */
        BranchIdQsr: string;
        /**
         * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
         * @enum {string}
         */
        DayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
        /**
         * @description The fulfillment type of the order the request relates to.
         * @enum {string}
         */
        OrderFulfillment: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
        /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
        PageAttributes: {
            [key: string]: string | number;
        };
        /**
         * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
         * @example [
         *       "SKU1",
         *       "SKU2"
         *     ]
         */
        ListedItems: string[];
        /**
         * Selector
         * @description Campaigns to choose variations for.
         */
        SelectorChoose: {
            /**
             * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
             * @example [
             *       "Banner Main",
             *       "German Banner",
             *       "PDP Recs Tray"
             *     ]
             */
            names: string[];
            /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
            groups?: string[];
            /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
            preview?: {
                /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                ids: string[];
            };
            /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
            args?: {
                [key: string]: {
                    /** @description A list of realtime filtering rules. */
                    realtimeRules?: {
                        /**
                         * @description Valid values are: `include`, `exclude`.
                         * @enum {string}
                         */
                        type?: "include" | "exclude";
                        /** @description All or specific slot positions. The first slot is in position 0. */
                        slots?: number[];
                        /** @description The filtering query. */
                        query?: {
                            /** @description The realtime rule's query conditions. */
                            conditions?: {
                                /**
                                 * @description Field within the returned results to apply the query for.
                                 * @example categories
                                 */
                                field: string;
                                /** @description A list of arguments for a query condition. */
                                arguments: {
                                    /**
                                     * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                     * @enum {string}
                                     */
                                    action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                    /**
                                     * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                     * @example basketball
                                     */
                                    value: unknown;
                                }[];
                            }[];
                        };
                    }[];
                };
            };
        };
        /**
         * Selector
         * @description Campaigns to choose variations for.
         */
        SelectorSearch: {
            /**
             * @description The selector name for the applicable search campaign. Must be one of the following:<ul><li>`Semantic Search`</li><li>`Visual Search`</li><li>`Shopping Muse`</li></ul>
             * @enum {string}
             */
            name: "Semantic Search" | "Visual Search" | "Shopping Muse";
        };
        /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
        Groups: string[];
        /**
         * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
         * @example [
         *       "Banner Main",
         *       "German Banner",
         *       "PDP Recs Tray"
         *     ]
         */
        Names: string[];
        /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
        Preview: {
            /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
            ids: string[];
        };
        /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
        Ids: string[];
        /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
        Args: {
            [key: string]: {
                /** @description A list of realtime filtering rules. */
                realtimeRules?: {
                    /**
                     * @description Valid values are: `include`, `exclude`.
                     * @enum {string}
                     */
                    type?: "include" | "exclude";
                    /** @description All or specific slot positions. The first slot is in position 0. */
                    slots?: number[];
                    /** @description The filtering query. */
                    query?: {
                        /** @description The realtime rule's query conditions. */
                        conditions?: {
                            /**
                             * @description Field within the returned results to apply the query for.
                             * @example categories
                             */
                            field: string;
                            /** @description A list of arguments for a query condition. */
                            arguments: {
                                /**
                                 * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                 * @enum {string}
                                 */
                                action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                /**
                                 * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                 * @example basketball
                                 */
                                value: unknown;
                            }[];
                        }[];
                    };
                }[];
            };
        };
        /** @description Real-time filter for a single selector. The object key should corresponds to a selector name defined under `selector.names`. */
        ArgsItem: {
            /** @description A list of realtime filtering rules. */
            realtimeRules?: {
                /**
                 * @description Valid values are: `include`, `exclude`.
                 * @enum {string}
                 */
                type?: "include" | "exclude";
                /** @description All or specific slot positions. The first slot is in position 0. */
                slots?: number[];
                /** @description The filtering query. */
                query?: {
                    /** @description The realtime rule's query conditions. */
                    conditions?: {
                        /**
                         * @description Field within the returned results to apply the query for.
                         * @example categories
                         */
                        field: string;
                        /** @description A list of arguments for a query condition. */
                        arguments: {
                            /**
                             * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                             * @enum {string}
                             */
                            action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                            /**
                             * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                             * @example basketball
                             */
                            value: unknown;
                        }[];
                    }[];
                };
            }[];
        };
        /** @description A list of realtime filtering rules. */
        RealtimeRules: {
            /**
             * @description Valid values are: `include`, `exclude`.
             * @enum {string}
             */
            type?: "include" | "exclude";
            /** @description All or specific slot positions. The first slot is in position 0. */
            slots?: number[];
            /** @description The filtering query. */
            query?: {
                /** @description The realtime rule's query conditions. */
                conditions?: {
                    /**
                     * @description Field within the returned results to apply the query for.
                     * @example categories
                     */
                    field: string;
                    /** @description A list of arguments for a query condition. */
                    arguments: {
                        /**
                         * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                         * @enum {string}
                         */
                        action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                        /**
                         * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                         * @example basketball
                         */
                        value: unknown;
                    }[];
                }[];
            };
        }[];
        /**
         * @description Valid values are: `include`, `exclude`.
         * @enum {string}
         */
        RealtimeRuleType: "include" | "exclude";
        /** @description All or specific slot positions. The first slot is in position 0. */
        RealtimeRuleSlots: number[];
        /** @description The filtering query. */
        RealtimeRuleQuery: {
            /** @description The realtime rule's query conditions. */
            conditions?: {
                /**
                 * @description Field within the returned results to apply the query for.
                 * @example categories
                 */
                field: string;
                /** @description A list of arguments for a query condition. */
                arguments: {
                    /**
                     * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                     * @enum {string}
                     */
                    action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                    /**
                     * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                     * @example basketball
                     */
                    value: unknown;
                }[];
            }[];
        };
        /** @description The realtime rule's query conditions. */
        QueryConditions: {
            /**
             * @description Field within the returned results to apply the query for.
             * @example categories
             */
            field: string;
            /** @description A list of arguments for a query condition. */
            arguments: {
                /**
                 * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                 * @enum {string}
                 */
                action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                /**
                 * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                 * @example basketball
                 */
                value: unknown;
            }[];
        }[];
        /**
         * @description Field within the returned results to apply the query for.
         * @example categories
         */
        QueryField: string;
        /** @description A list of arguments for a query condition. */
        QueryArguments: {
            /**
             * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
             * @enum {string}
             */
            action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
            /**
             * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
             * @example basketball
             */
            value: unknown;
        }[];
        /**
         * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
         * @enum {string}
         */
        QueryAction: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
        /**
         * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
         * @example basketball
         */
        QueryValue: unknown;
        /**
         * Options
         * @description Request configuration parameters.
         */
        OptionsChooseEcom: {
            /**
             * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
             * @default false
             */
            isImplicitPageview: boolean;
            /**
             * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
             * @default false
             */
            returnAnalyticsMetadata: boolean;
            /**
             * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
             * @default true
             */
            isImplicitImpressionMode: boolean;
            /**
             * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
             * @default false
             */
            isImplicitClientData: boolean;
            /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
            recsProductData?: {
                /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                fieldFilter?: string[];
                /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                skusOnly?: boolean;
            };
        };
        /**
         * Options
         * @description Request configuration parameters.
         */
        OptionsChooseQsr: {
            /**
             * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
             * @default false
             */
            isImplicitPageview: boolean;
            /**
             * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
             * @default false
             */
            returnAnalyticsMetadata: boolean;
            /**
             * @description Report an impression of the chosen variation. For Restaurants, this is set to `false` by default, which means that impressions should be reported explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call. Pass this as `true` in case the user's impression of the variation should be reported immediately when the variation is chosen.
             * @default false
             */
            isImplicitImpressionMode: boolean;
            /**
             * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
             * @default false
             */
            isImplicitClientData: boolean;
            /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
            recsProductData?: {
                /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                fieldFilter?: string[];
                /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                skusOnly?: boolean;
            };
        };
        /**
         * Options
         * @description Request configuration parameters.
         */
        OptionsSearchEcom: {
            /**
             * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
             * @default false
             */
            returnAnalyticsMetadata: boolean;
            /**
             * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
             * @default false
             */
            isImplicitClientData: boolean;
            /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
            recsProductData?: {
                /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                fieldFilter?: string[];
                /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                skusOnly?: boolean;
            };
        };
        /**
         * Options
         * @description Request configuration parameters.
         */
        OptionsPageview: {
            /**
             * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
             * @default false
             */
            isImplicitClientData: boolean;
        };
        /**
         * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
         * @default false
         */
        IsImplicitPageview: boolean;
        /**
         * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
         * @default false
         */
        ReturnAnalyticsMetadata: boolean;
        /**
         * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
         * @default true
         */
        IsImplicitImpressionMode: boolean;
        /**
         * @description Report an impression of the chosen variation. For Restaurants, this is set to `false` by default, which means that impressions should be reported explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call. Pass this as `true` in case the user's impression of the variation should be reported immediately when the variation is chosen.
         * @default false
         */
        IsImplicitImpressionModeQsr: boolean;
        /**
         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
         * @default false
         */
        IsImplicitClientData: boolean;
        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
        RecsProductDataEcom: {
            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
            fieldFilter?: string[];
            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
            skusOnly?: boolean;
        };
        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
        RecsProductDataQsr: {
            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
            fieldFilter?: string[];
            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
            skusOnly?: boolean;
        };
        /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
        FieldFilter: string[];
        /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
        SkusOnly: boolean;
        /**
         * Semantic Search Query
         * @description The user query for which to conduct the search.
         */
        QuerySemanticSearch: {
            /** @description The user's input text that specifies what should be searched. */
            text: string;
            /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
            filters?: ({
                /** @description Column name, as reported in the product feed. */
                field: string;
                /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                min?: number;
                /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                max?: number;
            } | {
                /** @description Column name, as reported in the product feed. */
                field: string;
                /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                values?: string[];
            })[];
            /** @description Pagination parameters for the query result. */
            pagination: {
                /** @description The number of items to be returned in the query result. */
                numItems: number;
                /** @description The starting offset. */
                offset: number;
            };
        };
        /**
         * Visual Search Query
         * @description The user query for which to conduct the search.
         */
        QueryVisualSearch: {
            /** @description A base64 representation of the input image. */
            imageBase64: string;
            /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
            filters?: ({
                /** @description Column name, as reported in the product feed. */
                field: string;
                /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                min?: number;
                /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                max?: number;
            } | {
                /** @description Column name, as reported in the product feed. */
                field: string;
                /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                values?: string[];
            })[];
        };
        /**
         * Shopping Muse Query
         * @description The user prompt and conversation ID for triggering a contextual Shopping Muse response.
         */
        QueryShoppingMuse: {
            /** @description The user's prompt that specifies a search request, question or an answer. */
            text: string;
            /** @description A unique identifier used to maintain conversational context. Include `chatId` when sending follow-up requests related to the response that contains it. */
            chatId?: string;
        };
        /** @description A base64 representation of the input image. */
        QueryImageBase64: string;
        /** @description The user's input text that specifies what should be searched. */
        QueryText: string;
        /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
        QueryFilters: ({
            /** @description Column name, as reported in the product feed. */
            field: string;
            /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
            min?: number;
            /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
            max?: number;
        } | {
            /** @description Column name, as reported in the product feed. */
            field: string;
            /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
            values?: string[];
        })[];
        /** Numeric Filter */
        QueryFilterNumber: {
            /** @description Column name, as reported in the product feed. */
            field: string;
            /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
            min?: number;
            /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
            max?: number;
        };
        /** String Filter */
        QueryFilterString: {
            /** @description Column name, as reported in the product feed. */
            field: string;
            /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
            values?: string[];
        };
        /** @description Pagination parameters for the query result. */
        QueryPagination: {
            /** @description The number of items to be returned in the query result. */
            numItems: number;
            /** @description The starting offset. */
            offset: number;
        };
        /**
         * @description Determines whether spell checking is enabled. Use only for Semantic Search and Shopping Muse.
         * @default true
         */
        QueryEnableSpellCheck: boolean;
        CartEcom: {
            /** @description SKU exactly as it appears in the product feed. */
            productId?: string;
            /**
             * @description Number of items.
             * @example 1
             */
            quantity?: number;
            /**
             * @description unit.cents format using the section default currency.
             * @example 23.99
             */
            itemPrice?: number;
        }[];
        /** @description Personalize campaigns based on cart state.<br>**Required when basket-based strategies and rules are being used.** */
        CartQsr: {
            /** @description The product ID from the restaurant product catalog. */
            productId: string;
            /** @description Number of items. */
            quantity?: number;
            /**
             * @description unit.cents format using the section default currency.
             * @example 23.99
             */
            itemPrice?: number;
            /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
            innerProducts?: {
                /** @description The product ID from the restaurant product catalog. */
                productId: string;
                /** @description Number of items. */
                quantity?: number;
                /**
                 * @description unit.cents format using the section default currency.
                 * @example 23.99
                 */
                itemPrice?: number;
            }[];
        }[];
        /** @description Personalize campaigns based on cart state.<br>**Required when basket-based strategies and rules are being used.** */
        CartExternal: {
            /** @description SKU exactly as it appears in the product feed. */
            productId: string;
            /** @description Number of items. */
            quantity: number;
            itemPrice: number & unknown;
            /**
             * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
             * @example 23.99
             */
            transactionItemValue: number;
            /**
             * @description Product size.
             * @example L
             */
            size?: string;
            /** @description **For restaurants only.** Indicate any inner products within the main product. */
            innerProducts?: {
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                /** @description Number of items. */
                quantity?: number;
                /**
                 * @description unit.cents format using the section default currency.
                 * @example 23.99
                 */
                itemPrice?: number;
            }[];
        }[];
        /** @description SKU exactly as it appears in the product feed. */
        CartProductIdEcom: string;
        /** @description The product ID from the restaurant product catalog. */
        CartProductIdQsr: string;
        /** @description Number of items. */
        CartQuantity: number;
        /**
         * @description unit.cents format using the section default currency.
         * @example 23.99
         */
        CartItemPrice: number;
        /**
         * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
         * @example 23.99
         */
        CartTransactionItemValue: number;
        /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
        InnerProductsQsr: {
            /** @description The product ID from the restaurant product catalog. */
            productId: string;
            /** @description Number of items. */
            quantity?: number;
            /**
             * @description unit.cents format using the section default currency.
             * @example 23.99
             */
            itemPrice?: number;
        }[];
        /** @description **For restaurants only.** Indicate any inner products within the main product. */
        InnerProductsExternal: {
            /** @description SKU exactly as it appears in the product feed. */
            productId: string;
            /** @description Number of items. */
            quantity?: number;
            /**
             * @description unit.cents format using the section default currency.
             * @example 23.99
             */
            itemPrice?: number;
        }[];
        /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
        EngagementsEcom: ({
            /**
             * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
             * @enum {string}
             */
            type: "CLICK" | "IMP";
            /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
            decisionId: string;
            /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
            variations: number[];
        } | {
            /**
             * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
             * @enum {string}
             */
            type: "SLOT_CLICK";
            /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
            slotId: string;
        } | {
            /**
             * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
             * @enum {string}
             */
            type: "PN_CLICK";
            /**
             * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
             * @example {
             *       "rri": "987001424",
             *       "sectionID": "9878785",
             *       "reqTs": "1652622484055",
             *       "userID": "4656722918296846673",
             *       "version": "2",
             *       "events": [
             *         {
             *           "ver": "101482916",
             *           "expVisitId": "4032971100745578591",
             *           "smech": "",
             *           "vars": "[101098971]",
             *           "exp": "1296028",
             *           "mech": "1"
             *         }
             *       ]
             *     }
             */
            trackingData: {
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 987001424
                 */
                rri?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 9878785
                 */
                sectionID?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 1652622484055
                 */
                reqTs?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 4656722918296846673
                 */
                userID?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 2
                 */
                version?: string;
                /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                events?: {
                    /** @example 101482916 */
                    ver?: string;
                    /** @example 4032971100745578591 */
                    expVisitId?: string;
                    /** @example  */
                    smech?: string;
                    vars?: string[];
                    /** @example 1296028 */
                    exp?: string;
                    /** @example 1 */
                    mech?: string;
                }[];
            };
        })[];
        /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
        EngagementsQsr: ({
            /**
             * @description Pass `SLOT_CLICK`.
             * @enum {string}
             */
            type: "SLOT_CLICK";
            /** @description Use to report a click on an API recommendation. Pass the Slot ID for the clicked product as returned in the `/choose` response. */
            slotId: string;
        } | {
            /**
             * @description Pass `SLOT_IMP`.
             * @enum {string}
             */
            type: "SLOT_IMP";
            /** @description Use to report impressions of an API recommendation. Pass the Slot IDs for the products as returned in the `/choose` response. */
            slotIds: string[];
        })[];
        /**
         * Engagement (type: IMP, CLICK)
         * @description A user engagement with a DY campaign.
         */
        EngagementEcomClickImp: {
            /**
             * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
             * @enum {string}
             */
            type: "CLICK" | "IMP";
            /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
            decisionId: string;
            /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
            variations: number[];
        };
        /**
         * Engagement (type: SLOT_CLICK)
         * @description A user engagement with a DY campaign.
         */
        EngagementEcomSlotClick: {
            /**
             * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
             * @enum {string}
             */
            type: "SLOT_CLICK";
            /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
            slotId: string;
        };
        /**
         * Engagement (type: PN_CLICK)
         * @description A user engagement with a DY campaign.
         */
        EngagementEcomPnClick: {
            /**
             * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
             * @enum {string}
             */
            type: "PN_CLICK";
            /**
             * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
             * @example {
             *       "rri": "987001424",
             *       "sectionID": "9878785",
             *       "reqTs": "1652622484055",
             *       "userID": "4656722918296846673",
             *       "version": "2",
             *       "events": [
             *         {
             *           "ver": "101482916",
             *           "expVisitId": "4032971100745578591",
             *           "smech": "",
             *           "vars": "[101098971]",
             *           "exp": "1296028",
             *           "mech": "1"
             *         }
             *       ]
             *     }
             */
            trackingData: {
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 987001424
                 */
                rri?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 9878785
                 */
                sectionID?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 1652622484055
                 */
                reqTs?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 4656722918296846673
                 */
                userID?: string;
                /**
                 * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                 * @example 2
                 */
                version?: string;
                /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                events?: {
                    /** @example 101482916 */
                    ver?: string;
                    /** @example 4032971100745578591 */
                    expVisitId?: string;
                    /** @example  */
                    smech?: string;
                    vars?: string[];
                    /** @example 1296028 */
                    exp?: string;
                    /** @example 1 */
                    mech?: string;
                }[];
            };
        };
        /**
         * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
         * @enum {string}
         */
        EngagementTypeEcomClickImp: "CLICK" | "IMP";
        /**
         * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
         * @enum {string}
         */
        EngagementTypeEcomSlotClick: "SLOT_CLICK";
        /**
         * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
         * @enum {string}
         */
        EngagementTypeEcomPnClick: "PN_CLICK";
        /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
        DecisionId: string;
        /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
        Variations: number[];
        /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
        SlotId: string;
        /**
         * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
         * @example {
         *       "rri": "987001424",
         *       "sectionID": "9878785",
         *       "reqTs": "1652622484055",
         *       "userID": "4656722918296846673",
         *       "version": "2",
         *       "events": [
         *         {
         *           "ver": "101482916",
         *           "expVisitId": "4032971100745578591",
         *           "smech": "",
         *           "vars": "[101098971]",
         *           "exp": "1296028",
         *           "mech": "1"
         *         }
         *       ]
         *     }
         */
        TrackingData: {
            /**
             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
             * @example 987001424
             */
            rri?: string;
            /**
             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
             * @example 9878785
             */
            sectionID?: string;
            /**
             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
             * @example 1652622484055
             */
            reqTs?: string;
            /**
             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
             * @example 4656722918296846673
             */
            userID?: string;
            /**
             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
             * @example 2
             */
            version?: string;
            /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
            events?: {
                /** @example 101482916 */
                ver?: string;
                /** @example 4032971100745578591 */
                expVisitId?: string;
                /** @example  */
                smech?: string;
                vars?: string[];
                /** @example 1296028 */
                exp?: string;
                /** @example 1 */
                mech?: string;
            }[];
        };
        /** @description One or more events to report. */
        EventsEcom: ({
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-cart-v1`.
                 * @default add-to-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 98.8
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `remove-from-cart-v1`.
                 * @default remove-from-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sync-cart-v1`.
                 * @default sync-cart-v1
                 */
                dyType: string;
                value: number & unknown;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `identify-v1`.
                 * @default identify-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `login-v1`.
                 * @default login-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `signup-v1`. */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `newsletter-subscription-v1`.
                 * @default newsletter-subscription-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optin-v1`.
                 * @default message-optin-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optout-v1`.
                 * @default message-optout-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `keyword-search-v1`.
                 * @default keyword-search-v1
                 */
                dyType: string;
                /**
                 * @description The search string.
                 * @example contact info
                 */
                keywords: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-wishlist-v1`.
                 * @default add-to-wishlist-v1
                 */
                dyType: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                /**
                 * @description Product size.
                 * @example L
                 */
                size?: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `filter-items-v1`.
                 * @default filter-items-v1
                 */
                dyType: string;
                /**
                 * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                 * @example color
                 */
                filterType: string;
                /**
                 * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                 * @example 20
                 */
                filterNumericValue?: number;
                /**
                 * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                 * @example Gray
                 */
                filterStringValue?: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `change-attribute-v1`.
                 * @default change-attr-v1
                 */
                dyType: string;
                /**
                 * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                 * @example Color
                 */
                attributeType: string;
                /**
                 * @description The new value (for example, new color is Gray).
                 * @example Navy Blue
                 */
                attributeValue: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `video-watch-v1`.
                 * @default video-watch-v1
                 */
                dyType: string;
                /**
                 * @description ID that matches an item ID in the content feed.
                 * @example 33849492012003
                 */
                itemId: string;
                /**
                 * @description *Optional*
                 * @example [
                 *       "Sports",
                 *       "Baseball"
                 *     ]
                 */
                categories?: string[];
                /**
                 * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                 * @default false
                 */
                autoplay: boolean;
                /**
                 * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                 * @example VIDEO_STARTED
                 * @enum {string}
                 */
                progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                /**
                 * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                 * @example 65
                 */
                progressPercent: number;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sort-items-v1`.
                 * @default sort-items-v1
                 */
                dyType: string;
                /**
                 * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                 * @example price
                 */
                sortBy: string;
                /**
                 * @description `ASC` or `DESC`.
                 * @example ASC
                 */
                sortOrder: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `enter-promo-code-v1`.
                 * @default enter-promo-code-v1
                 */
                dyType: string;
                /**
                 * @description The promo code.
                 * @example SPECIALOFFER
                 */
                code: string;
            };
        } | {
            /**
             * @description Event name for display. Does not have a `dyType` property.
             * @example VIP Login
             */
            name: string;
            /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
            properties?: {
                /**
                 * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                 * @example 98.7
                 */
                value?: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
            } & {
                [key: string]: string | number | boolean;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `inform-affinity-v1`. */
                dyType: string;
                /** @description The source of the user data */
                source?: string;
                /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                data: {
                    /** @description name of attribute */
                    attribute?: unknown;
                    values?: string[];
                }[];
            };
        })[];
        /** @description One or more events to report. */
        EventsFi: ({
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-cart-v1`.
                 * @default add-to-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                value: number & unknown;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `remove-from-cart-v1`.
                 * @default remove-from-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sync-cart-v1`.
                 * @default sync-cart-v1
                 */
                dyType: string;
                value: number & unknown;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `identify-v1`.
                 * @default identify-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `login-v1`.
                 * @default login-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `signup-v1`. */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `newsletter-subscription-v1`.
                 * @default newsletter-subscription-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optin-v1`.
                 * @default message-optin-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optout-v1`.
                 * @default message-optout-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `keyword-search-v1`.
                 * @default keyword-search-v1
                 */
                dyType: string;
                /**
                 * @description The search string.
                 * @example contact info
                 */
                keywords: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-wishlist-v1`.
                 * @default add-to-wishlist-v1
                 */
                dyType: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                /**
                 * @description Product size.
                 * @example L
                 */
                size?: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `filter-items-v1`.
                 * @default filter-items-v1
                 */
                dyType: string;
                /**
                 * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                 * @example color
                 */
                filterType: string;
                /**
                 * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                 * @example 20
                 */
                filterNumericValue?: number;
                /**
                 * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                 * @example Gray
                 */
                filterStringValue?: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `change-attribute-v1`.
                 * @default change-attr-v1
                 */
                dyType: string;
                /**
                 * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                 * @example Color
                 */
                attributeType: string;
                /**
                 * @description The new value (for example, new color is Gray).
                 * @example Navy Blue
                 */
                attributeValue: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `video-watch-v1`.
                 * @default video-watch-v1
                 */
                dyType: string;
                /**
                 * @description ID that matches an item ID in the content feed.
                 * @example 33849492012003
                 */
                itemId: string;
                /**
                 * @description *Optional*
                 * @example [
                 *       "Sports",
                 *       "Baseball"
                 *     ]
                 */
                categories?: string[];
                /**
                 * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                 * @default false
                 */
                autoplay: boolean;
                /**
                 * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                 * @example VIDEO_STARTED
                 * @enum {string}
                 */
                progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                /**
                 * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                 * @example 65
                 */
                progressPercent: number;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sort-items-v1`.
                 * @default sort-items-v1
                 */
                dyType: string;
                /**
                 * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                 * @example price
                 */
                sortBy: string;
                /**
                 * @description `ASC` or `DESC`.
                 * @example ASC
                 */
                sortOrder: string;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `enter-promo-code-v1`.
                 * @default enter-promo-code-v1
                 */
                dyType: string;
                /**
                 * @description The promo code.
                 * @example SPECIALOFFER
                 */
                code: string;
            };
        } | {
            /**
             * @description Event name for display. Does not have a `dyType` property.
             * @example VIP Login
             */
            name: string;
            /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
            properties?: {
                /**
                 * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                 * @example 98.7
                 */
                value?: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
            } & {
                [key: string]: string | number | boolean;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `inform-affinity-v1`. */
                dyType: string;
                /** @description The source of the user data */
                source?: string;
                /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                data: {
                    /** @description name of attribute */
                    attribute?: unknown;
                    values?: string[];
                }[];
            };
        })[];
        /** @description One or more events to report. */
        EventsQsr: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description The product ID from the restaurant product catalog. */
                    productId: string;
                    /** @description Number of items. */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                    /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                    innerProducts?: {
                        /** @description The product ID from the restaurant product catalog. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                }[];
            };
        }[];
        /** @description One or more events to report. */
        EventsExternal: ({
            /** @description A human-readable name corresponding to the schema name. */
            name: string;
            properties: Record<string, never> & {
                /**
                 * @description Must be `offline-purchase-v1`.
                 * @default offline-purchase-v1
                 * @example offline-purchase-v1
                 */
                dyType: string;
                uniqueTransactionId: string & unknown;
                /**
                 * @description The source where the transaction occurred, usually the physical store ID.
                 * @example f877e8a9dbb
                 */
                transactionSource?: string;
                /**
                 * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
                 * @example 2018-09-23T07:29:51+00:00
                 */
                transactionDatetime: string;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                cart: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    /** @description Number of items. */
                    quantity: number;
                    itemPrice: number & unknown;
                    /**
                     * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
                     * @example 23.99
                     */
                    transactionItemValue: number;
                    /**
                     * @description Product size.
                     * @example L
                     */
                    size?: string;
                    /** @description **For restaurants only.** Indicate any inner products within the main product. */
                    innerProducts?: {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                }[] & unknown;
            };
        } | {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `inform-affinity-v1`. */
                dyType: string;
                /** @description The source of the user data */
                source?: string;
                /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                data: {
                    /** @description name of attribute */
                    attribute?: unknown;
                    values?: string[];
                }[];
            };
        } | {
            /**
             * @description Event name for display. Does not have a `dyType` property.
             * @example VIP Login
             */
            name: string;
            /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
            properties?: {
                /**
                 * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                 * @example 98.7
                 */
                value?: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
            } & {
                [key: string]: string | number | boolean;
            };
        })[];
        /** @description Data for the reported event. */
        EventProperties: Record<string, never>;
        /** @description A human-readable name corresponding to the schema name. */
        EventName: string;
        /**
         * Add to Cart
         * @description Reports that the user added a product to the cart.<br>**REQUIRED FOR E-COMMERCE SECTIONS**
         * @example {
         *       "name": "Add To Cart",
         *       "properties": {
         *         "dyType": "add-to-cart-v1",
         *         "value": 118.26,
         *         "currency": "any supported currency code",
         *         "productId": "item-34454",
         *         "quantity": 2,
         *         "cart": [
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 12.34
         *           },
         *           {
         *             "productId": "item-34454",
         *             "quantity": 2,
         *             "itemPrice": 59.13
         *           }
         *         ]
         *       }
         *     }
         */
        AddToCart: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-cart-v1`.
                 * @default add-to-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[] & unknown;
            };
        };
        /**
         * Application
         * @description Reports that a user started the application process for a product.<br>**REQUIRED FOR FINANCIAL INSTITUTIONS SECTIONS**
         * @example {
         *       "name": "Application Started",
         *       "properties": {
         *         "dyType": "add-to-cart-v1",
         *         "value": 400,
         *         "currency": "EUR",
         *         "productId": "item-34454",
         *         "quantity": 2,
         *         "cart": [
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 100
         *           },
         *           {
         *             "productId": "item-34454",
         *             "quantity": 2,
         *             "itemPrice": 200
         *           }
         *         ]
         *       }
         *     }
         */
        Application: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-cart-v1`.
                 * @default add-to-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[] & unknown;
            };
        };
        /**
         * Purchase
         * @description Reports that the user completed a purchase.<br>**REQUIRED FOR E-COMMERCE SECTIONS**
         * @example {
         *       "name": "Purchase",
         *       "properties": {
         *         "uniqueTransactionId": 123456,
         *         "dyType": "purchase-v1",
         *         "value": 90.55,
         *         "currency": "any supported currency code",
         *         "cart": [
         *           {
         *             "productId": "item-34454",
         *             "quantity": 1,
         *             "itemPrice": 65.87
         *           },
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 12.34
         *           }
         *         ]
         *       }
         *     }
         */
        Purchase: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 98.8
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        };
        /**
         * Purchase
         * @description Reports that the user completed a purchase.
         */
        PurchaseQsr: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description The product ID from the restaurant product catalog. */
                    productId: string;
                    /** @description Number of items. */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                    /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                    innerProducts?: {
                        /** @description The product ID from the restaurant product catalog. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                }[];
            };
        };
        /**
         * Submission
         * @description Reports that the user submitted an application.<br>**REQUIRED FOR FINANCIAL INSTITUTIONS SECTIONS**
         * @example {
         *       "name": "Submission",
         *       "properties": {
         *         "uniqueTransactionId": 123456,
         *         "dyType": "purchase-v1",
         *         "value": 90.55,
         *         "currency": "any supported currency code",
         *         "cart": [
         *           {
         *             "productId": "item-34454",
         *             "quantity": 1,
         *             "itemPrice": 65.87
         *           },
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 12.34
         *           }
         *         ]
         *       }
         *     }
         */
        Submission: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `purchase-v1`.
                 * @default purchase-v1
                 */
                dyType: string;
                value: number & unknown;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                 * @example 38373991919193830033
                 */
                uniqueTransactionId?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        };
        /**
         * Remove from Cart
         * @description Reports that the user removed an item from the cart.
         * @example {
         *       "name": "Remove from Cart",
         *       "properties": {
         *         "dyType": "remove-from-cart-v1",
         *         "value": 34.45,
         *         "currency": "any supported currency code",
         *         "productId": "gswefd-34-454",
         *         "quantity": 1,
         *         "cart": [
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 12.34
         *           },
         *           {
         *             "productId": "item-34454",
         *             "quantity": 1,
         *             "itemPrice": 34.45
         *           }
         *         ]
         *       }
         *     }
         */
        RemoveFromCart: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `remove-from-cart-v1`.
                 * @default remove-from-cart-v1
                 */
                dyType: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                quantity: number & unknown;
                cart?: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        };
        /**
         * Sync Cart
         * @description **THIS EVENT IS MANDATORY FOR:**<br><ul><li>The [*Exclude items currently in cart* filter](https://support.dynamicyield.com/hc/en-us/articles/360019720178#h_01FZW8C8C9JSHT05QW6764K0XV), and must be fired upon every page load.</li><li>[Reconnect](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect) implementation.</li></ul>
         * @example {
         *       "name": "Sync Cart",
         *       "properties": {
         *         "dyType": "sync-cart-v1",
         *         "value": 125.5,
         *         "currency": "any supported currency code",
         *         "cart": [
         *           {
         *             "productId": "sku-4324-bg",
         *             "quantity": 2,
         *             "itemPrice": 12.34
         *           },
         *           {
         *             "productId": "item-34454",
         *             "quantity": 1,
         *             "itemPrice": 34.45
         *           }
         *         ]
         *       }
         *     }
         */
        SyncCart: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sync-cart-v1`.
                 * @default sync-cart-v1
                 */
                dyType: string;
                value: number & unknown;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                cart: unknown & {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId?: string;
                    /**
                     * @description Number of items.
                     * @example 1
                     */
                    quantity?: number;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    itemPrice?: number;
                }[];
            };
        };
        /**
         * Identify User
         * @description Use to identify visitors at any point during their journey on your site or app, such as during the checkout process.
         * @example {
         *       "name": "Identify",
         *       "properties": {
         *         "dyType": "identify-v1",
         *         "cuid": "demo@email.com",
         *         "cuidType": "EcommerceID",
         *         "secondaryIdentifiers": [
         *           {
         *             "type": "hashedPhoneNumber",
         *             "value": "49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e"
         *           },
         *           {
         *             "type": "ecommerceID",
         *             "value": "12345"
         *           },
         *           {
         *             "type": "vipClub",
         *             "value": "678910"
         *           }
         *         ]
         *       }
         *     }
         */
        IdentifyUser: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `identify-v1`.
                 * @default identify-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        };
        /**
         * Login
         * @description Reports that a user has logged in.
         * @example {
         *       "name": "Login",
         *       "properties": {
         *         "dyType": "login-v1",
         *         "cuid": "demo@email.com",
         *         "cuidType": "EcommerceID",
         *         "secondaryIdentifiers": [
         *           {
         *             "type": "hashedPhoneNumber",
         *             "value": "49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e"
         *           },
         *           {
         *             "type": "ecommerceID",
         *             "value": "12345"
         *           },
         *           {
         *             "type": "vipClub",
         *             "value": "678910"
         *           }
         *         ]
         *       }
         *     }
         */
        Login: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `login-v1`.
                 * @default login-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        };
        /**
         * Signup
         * @description Reports that the user completed the signup process and is a registered user.
         * @example {
         *       "name": "Signup",
         *       "properties": {
         *         "dyType": "signup-v1",
         *         "cuid": "demo@email.com",
         *         "cuidType": "EcommerceID",
         *         "secondaryIdentifiers": [
         *           {
         *             "type": "hashedPhoneNumber",
         *             "value": "49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e"
         *           },
         *           {
         *             "type": "ecommerceID",
         *             "value": "12345"
         *           },
         *           {
         *             "type": "vipClub",
         *             "value": "678910"
         *           }
         *         ]
         *       }
         *     }
         */
        Signup: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `signup-v1`. */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        };
        /**
         * Newsletter Subscription
         * @description Reports that a user subscribed to a newsletter. Identification event.
         * @example {
         *       "name": "Newsletter Subscription",
         *       "properties": {
         *         "dyType": "newsletter-subscription-v1",
         *         "cuid": "demo@email.com",
         *         "cuidType": "EcommerceID",
         *         "secondaryIdentifiers": [
         *           {
         *             "type": "hashedPhoneNumber",
         *             "value": "49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e"
         *           },
         *           {
         *             "type": "ecommerceID",
         *             "value": "12345"
         *           },
         *           {
         *             "type": "vipClub",
         *             "value": "678910"
         *           }
         *         ]
         *       }
         *     }
         */
        NewsletterSubscription: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `newsletter-subscription-v1`.
                 * @default newsletter-subscription-v1
                 */
                dyType: string;
                /**
                 * @description User identifier value. Max 250 characters.
                 * @enum {string}
                 */
                cuid?: "demo@email.com" | "123456789";
                /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                cuidType?: string;
                secondaryIdentifiers?: {
                    /** @example hashedPhoneNumber */
                    type?: string;
                    /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                    value?: string;
                }[] & unknown;
            };
        };
        /**
         * Push Opt-In
         * @description Reports that a user opted in to receive Reconnect push notifications.
         * @example {
         *       "name": "Push Opt-in",
         *       "properties": {
         *         "dyType": "message-optin-v1",
         *         "pushId": "f7a8c987-7ab5-400f-b989-5357af507343"
         *       }
         *     }
         */
        MessageOptIn: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optin-v1`.
                 * @default message-optin-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        };
        /**
         * Push Opt-Out
         * @description Reports that a user opted out of receiving Reconnect push notifications.
         * @example {
         *       "name": "Push Opt-Out",
         *       "properties": {
         *         "dyType": "message-optout-v1",
         *         "pushId": "f7a8c987-7ab5-400f-b989-5357af507343"
         *       }
         *     }
         */
        MessageOptOut: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `message-optout-v1`.
                 * @default message-optout-v1
                 */
                dyType: string;
                /**
                 * @description Reports that a user opted in to receive Reconnect push notifications.
                 * @example f7a8c987-7ab5-400f-b989-5357af507343
                 */
                pushId: string;
            };
        };
        /**
         * Keyword Search
         * @description Reports that a user ran a freestyle keyword search.
         * @example {
         *       "name": "Keyword search",
         *       "properties": {
         *         "dyType": "keyword-search-v1",
         *         "keywords": "contact info"
         *       }
         *     }
         */
        KeywordSearch: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `keyword-search-v1`.
                 * @default keyword-search-v1
                 */
                dyType: string;
                /**
                 * @description The search string.
                 * @example contact info
                 */
                keywords: string;
            };
        };
        /**
         * Add to Wishlist
         * @description Reports that a user added a product to their wishlist.
         * @example {
         *       "name": "Add to Wishlist",
         *       "properties": {
         *         "dyType": "add-to-wishlist-v1",
         *         "productId": "item-34454",
         *         "size": "XL"
         *       }
         *     }
         */
        AddToWishlist: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `add-to-wishlist-v1`.
                 * @default add-to-wishlist-v1
                 */
                dyType: string;
                /** @description SKU exactly as it appears in the product feed. */
                productId: string;
                /**
                 * @description Product size.
                 * @example L
                 */
                size?: string;
            };
        };
        /**
         * Filter Items
         * @description Reports that the user filtered the product list by a specific field value.
         * @example {
         *       "name": "Filter Items",
         *       "properties": {
         *         "dyType": "filter-items-v1",
         *         "filterType": "color",
         *         "filterNumericValue": 4
         *       }
         *     }
         */
        FilterItems: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `filter-items-v1`.
                 * @default filter-items-v1
                 */
                dyType: string;
                /**
                 * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                 * @example color
                 */
                filterType: string;
                /**
                 * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                 * @example 20
                 */
                filterNumericValue?: number;
                /**
                 * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                 * @example Gray
                 */
                filterStringValue?: string;
            };
        };
        /**
         * Change Attribute
         * @description Reports that a user changed an attribute of the displayed product (such as color or size).<br>**Note:** The attribute type and value must match information in your product feed. The currently displayed product is inferred from the in-page context.<br>**This event is currently available for script implementation only.**
         * @example {
         *       "name": "Change Attribute",
         *       "properties": {
         *         "dyType": "change-attr-v1",
         *         "attributeType": "Color",
         *         "attributeValue": "Navy Blue"
         *       }
         *     }
         */
        ChangeAttribute: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `change-attribute-v1`.
                 * @default change-attr-v1
                 */
                dyType: string;
                /**
                 * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                 * @example Color
                 */
                attributeType: string;
                /**
                 * @description The new value (for example, new color is Gray).
                 * @example Navy Blue
                 */
                attributeValue: string;
            };
        };
        /**
         * Video Watch
         * @description Reports that a user watched a video on a media site or application.<br>This event can report that the user watched a video in part or in full. You can distinguish between auto-play videos and those that the user explicitly clicked to watch.
         * @example {
         *       "name": "Video Watch",
         *       "properties": {
         *         "dyType": "video-watch-v1",
         *         "itemId": "33849492012003",
         *         "categories": [
         *           "Sports",
         *           "Baseball"
         *         ],
         *         "autoplay": true,
         *         "progress": "VIDEO_PROGRESS",
         *         "progressPercent": 65
         *       }
         *     }
         */
        VideoWatch: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `video-watch-v1`.
                 * @default video-watch-v1
                 */
                dyType: string;
                /**
                 * @description ID that matches an item ID in the content feed.
                 * @example 33849492012003
                 */
                itemId: string;
                /**
                 * @description *Optional*
                 * @example [
                 *       "Sports",
                 *       "Baseball"
                 *     ]
                 */
                categories?: string[];
                /**
                 * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                 * @default false
                 */
                autoplay: boolean;
                /**
                 * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                 * @example VIDEO_STARTED
                 * @enum {string}
                 */
                progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                /**
                 * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                 * @example 65
                 */
                progressPercent: number;
            };
        };
        /**
         * Sort Items
         * @description Reports that the user changed the sorting of a product list.<br>**This event is currently available for script implementation only.**
         * @example {
         *       "name": "Sort Items",
         *       "properties": {
         *         "dyType": "sort-items-v1",
         *         "sortBy": "PRICE",
         *         "sortOrder": "ASC"
         *       }
         *     }
         */
        SortItems: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `sort-items-v1`.
                 * @default sort-items-v1
                 */
                dyType: string;
                /**
                 * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                 * @example price
                 */
                sortBy: string;
                /**
                 * @description `ASC` or `DESC`.
                 * @example ASC
                 */
                sortOrder: string;
            };
        };
        /**
         * Promo Code Entered
         * @description Reports that the user entered a valid promotion code.<br>**This event is currently available for script implementation only.**
         * @example {
         *       "name": "Promo Code Entered",
         *       "properties": {
         *         "dyType": "enter-promo-code-v1",
         *         "code": "SPECIALOFFER"
         *       }
         *     }
         */
        PromoCodeEntered: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /**
                 * @description Must be `enter-promo-code-v1`.
                 * @default enter-promo-code-v1
                 */
                dyType: string;
                /**
                 * @description The promo code.
                 * @example SPECIALOFFER
                 */
                code: string;
            };
        };
        /**
         * Custom Event
         * @description Use custom events to report any event that isn't already defined for use in Experience OS, but is significant to your business.<br>**Note:** custom events support only symbols that are encoded with UTF-8 ([Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane)). Some characters with diacritics (additional symbols above or below the letter) are read as the base character. For example, **é** is processed as **e**.
         * @example {
         *       "name": "Custom Event Example 1",
         *       "properties": {
         *         "isVIP": true
         *       }
         *     }
         */
        CustomEvent: {
            /**
             * @description Event name for display. Does not have a `dyType` property.
             * @example VIP Login
             */
            name: string;
            /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
            properties?: {
                /**
                 * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                 * @example 98.7
                 */
                value?: number;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
            } & {
                [key: string]: string | number | boolean;
            };
        };
        /**
         * Inform Affinity
         * @description Report an array of product attributes to use in affinity personalization.
         * @example {
         *       "name": "Inform Affinity",
         *       "properties": {
         *         "dyType": "inform-affinity-v1",
         *         "source": "registration-form",
         *         "data": [
         *           {
         *             "attribute": "categories",
         *             "values": [
         *               "shoes",
         *               "tops",
         *               "accessories"
         *             ]
         *           },
         *           {
         *             "attribute": "brand",
         *             "values": [
         *               "adidas"
         *             ]
         *           }
         *         ]
         *       }
         *     }
         */
        InformAffinity: {
            /** @description A human-readable name corresponding to the schema name. */
            name?: string;
            properties?: Record<string, never> & {
                /** @description Must be `inform-affinity-v1`. */
                dyType: string;
                /** @description The source of the user data */
                source?: string;
                /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                data: {
                    /** @description name of attribute */
                    attribute?: unknown;
                    values?: string[];
                }[];
            };
        };
        /**
         * Offline Purchase
         * @description Reports that the user completed a purchase.
         */
        OfflinePurchase: {
            /** @description A human-readable name corresponding to the schema name. */
            name: string;
            properties: Record<string, never> & {
                /**
                 * @description Must be `offline-purchase-v1`.
                 * @default offline-purchase-v1
                 * @example offline-purchase-v1
                 */
                dyType: string;
                uniqueTransactionId: string & unknown;
                /**
                 * @description The source where the transaction occurred, usually the physical store ID.
                 * @example f877e8a9dbb
                 */
                transactionSource?: string;
                /**
                 * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
                 * @example 2018-09-23T07:29:51+00:00
                 */
                transactionDatetime: string;
                /**
                 * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                 * @example USD
                 */
                currency?: string;
                /**
                 * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                 * @example 19.9
                 */
                value: number;
                cart: {
                    /** @description SKU exactly as it appears in the product feed. */
                    productId: string;
                    /** @description Number of items. */
                    quantity: number;
                    itemPrice: number & unknown;
                    /**
                     * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
                     * @example 23.99
                     */
                    transactionItemValue: number;
                    /**
                     * @description Product size.
                     * @example L
                     */
                    size?: string;
                    /** @description **For restaurants only.** Indicate any inner products within the main product. */
                    innerProducts?: {
                        /** @description SKU exactly as it appears in the product feed. */
                        productId: string;
                        /** @description Number of items. */
                        quantity?: number;
                        /**
                         * @description unit.cents format using the section default currency.
                         * @example 23.99
                         */
                        itemPrice?: number;
                    }[];
                }[] & unknown;
            };
        };
        /**
         * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
         * @example Color
         */
        AttributeType: string;
        /**
         * @description The new value (for example, new color is Gray).
         * @example Navy Blue
         */
        AttributeValue: string;
        /**
         * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
         * @default false
         */
        Autoplay: boolean;
        /**
         * @description *Optional*
         * @example [
         *       "Sports",
         *       "Baseball"
         *     ]
         */
        Categories: string[];
        /**
         * @description The promo code.
         * @example SPECIALOFFER
         */
        Code: string;
        /**
         * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
         * @example USD
         */
        Currency: string;
        /**
         * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
         * @example 20
         */
        FilterNumericValue: number;
        /**
         * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
         * @example Gray
         */
        FilterStringValue: string;
        /**
         * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
         * @example color
         */
        FilterType: string;
        /**
         * @description ID that matches an item ID in the content feed.
         * @example 33849492012003
         */
        ItemId: string;
        /**
         * @description The search string.
         * @example contact info
         */
        Keywords: string;
        /**
         * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
         * @example 65
         */
        ProgressPercent: number;
        /**
         * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
         * @example VIDEO_STARTED
         * @enum {string}
         */
        Progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
        /**
         * @description Reports that a user opted in to receive Reconnect push notifications.
         * @example f7a8c987-7ab5-400f-b989-5357af507343
         */
        PushId: string;
        /**
         * @description Number of items.
         * @example 1
         */
        Quantity: number;
        /**
         * @description Product size.
         * @example L
         */
        Size: string;
        /**
         * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
         * @example price
         */
        SortBy: string;
        /**
         * @description `ASC` or `DESC`.
         * @example ASC
         */
        SortOrder: string;
        /**
         * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
         * @example 2018-09-23T07:29:51+00:00
         */
        TransactionDatetime: string;
        /**
         * @description The source where the transaction occurred, usually the physical store ID.
         * @example f877e8a9dbb
         */
        TransactionSource: string;
        /**
         * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
         * @example 38373991919193830033
         */
        UniqueTransactionId: string;
        /**
         * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
         * @example 98.8
         */
        ValueTotal: number;
        /**
         * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
         * @example 19.9
         */
        Value: number;
        /** @description A list of outage reports per branch. */
        OutagesQsr: {
            /** @description The ID of the branch the recommendation is for. */
            branchId: string;
            /** @description A list of out-of-stock product IDs */
            products: string[];
        }[];
        /** @description A list of out-of-stock product IDs */
        OutageProducts: string[];
        /**
         * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
         * @example A123
         */
        Sku: string;
        /**
         * @description Whether the product is available in the specific branch or not. Unavailable products will not be recommended.
         * @example true
         */
        Availability: boolean;
        /**
         * @description The price of the product that is used in the specific branch.
         * @example 3.14
         */
        Price: number;
        /** @description A local variation of the product name, if exists in the specific branch. */
        Name: string;
        /** @description The SKUs of all the products that can be added onto the main product, and the permitted quantities. */
        Addons: {
            /**
             * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
             * @example A123
             */
            sku: string;
            /**
             * @description The default quantity of this ingredient (add on) inside the parent product.
             * @example 1
             */
            default_quantity?: number;
            /**
             * @description The minimum quantity of this ingredient (add on) inside the parent product.
             * @example 0
             */
            min_quantity?: number;
            /**
             * @description The maximum quantity of this ingredient (add on) inside the parent product.
             * @example 3
             */
            max_quantity?: number;
            /**
             * @description The amount from which the QSR is going to charge for the addition of the add on.
             * @example 1
             */
            charge_threshold?: number;
        }[];
        /**
         * @description The default quantity of this ingredient (add on) inside the parent product.
         * @example 1
         */
        DefaultQuantity: number;
        /**
         * @description The minimum quantity of this ingredient (add on) inside the parent product.
         * @example 0
         */
        MinQuantity: number;
        /**
         * @description The maximum quantity of this ingredient (add on) inside the parent product.
         * @example 3
         */
        MaxQuantity: number;
        /**
         * @description The amount from which the QSR is going to charge for the addition of the add on.
         * @example 1
         */
        ChargeThreshold: number;
        /** @description A list of user data update requests to be executed. */
        UserDataRequests: ({
            /**
             * @description Use `upsert` to add user data.
             * @example upsert
             * @enum {string}
             */
            action: "upsert";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
            /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
            data: {
                [key: string]: unknown;
            };
        } | {
            /**
             * @description Use `delete` to remove data.
             * @example delete
             * @enum {string}
             */
            action: "delete";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
        } | {
            /**
             * @description Use `array_add` and `array_remove` to edit data in existing arrays.
             * @example array_add
             * @enum {string}
             */
            action: "array_add" | "array_remove";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
            data: {
                [key: string]: string[];
            } | {
                [key: string]: number[];
            };
        })[];
        /** array_add/array_remove Request */
        UserDataRequestArray: {
            /**
             * @description Use `array_add` and `array_remove` to edit data in existing arrays.
             * @example array_add
             * @enum {string}
             */
            action: "array_add" | "array_remove";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
            data: {
                [key: string]: string[];
            } | {
                [key: string]: number[];
            };
        };
        /** Upsert Request */
        UserDataRequestUpsert: {
            /**
             * @description Use `upsert` to add user data.
             * @example upsert
             * @enum {string}
             */
            action: "upsert";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
            /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
            data: {
                [key: string]: unknown;
            };
        };
        /** Delete Request */
        UserDataRequestDelete: {
            /**
             * @description Use `delete` to remove data.
             * @example delete
             * @enum {string}
             */
            action: "delete";
            cuid: ("demo@email.com" | "123456789") & unknown;
            cuidtype: string & unknown & unknown;
            /**
             * Format: date-time
             * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
             * @example 2021-07-24T13:44:17+02:00
             */
            timestamp: string;
        };
        /**
         * @description Use `array_add` and `array_remove` to edit data in existing arrays.
         * @example array_add
         * @enum {string}
         */
        UserDataActionArray: "array_add" | "array_remove";
        /**
         * @description Use `upsert` to add user data.
         * @example upsert
         * @enum {string}
         */
        UserDataActionUpsert: "upsert";
        /**
         * @description Use `delete` to remove data.
         * @example delete
         * @enum {string}
         */
        UserDataActionDelete: "delete";
        /**
         * Format: date-time
         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
         * @example 2021-07-24T13:44:17+02:00
         */
        Timestamp: string;
        /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
        UserDataUpsert: {
            [key: string]: unknown;
        };
        /**
         * Data: array of strings
         * @description Add CRM data here.
         */
        UserDataArrayString: {
            [key: string]: string[];
        };
        /**
         * Data: array of numbers
         * @description Add CRM data here. Insert the integer values corresponding to your predefined dropdown array. [Learn more about mapping numeric values to dropdown arrays](https://support.dynamicyield.com/hc/en-us/articles/4409595248017-Update-Your-User-Data-Feed-by-API#h_01FZ58DYM9WMR66N2P3Z4NKF7R).
         */
        UserDataArrayNumber: {
            [key: string]: number[];
        };
        /** @description User's identifying details. */
        UserDataUser: {
            /**
             * @description User identifier value. Max 250 characters.
             * @enum {string}
             */
            cuid: "demo@email.com" | "123456789";
            cuidType: string & unknown;
        };
        /** @description A list of product feed action requests. */
        ProductFeedRequests: {
            /** @description SKU exactly as it appears in the product feed. */
            id: string;
            /**
             * @description Type of action requested. Valid values are:<ul>`update` - Insert a new product or rewrite an entire product’s data<br>`partial` - Update specific fields for a single product<br>`delete` - Delete a product</ul>
             * @enum {string}
             */
            action: "update" | "partial" | "delete";
            /** @description Single request body. */
            body?: {
                /** @description Product data. */
                data?: {
                    /** @description SKU exactly as it appears in the product feed. */
                    sku?: string;
                    /**
                     * @description Product group ID.
                     * @example abc
                     */
                    group_id?: string;
                    /**
                     * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
                     * @example http://www.example.com/abc-123
                     */
                    url?: string;
                    /**
                     * @description Product name.
                     * @example white sneakers
                     */
                    name?: string;
                    /**
                     * @description unit.cents format using the section default currency.
                     * @example 23.99
                     */
                    price?: number;
                    /**
                     * @description Whether the product is in stock or in outage.
                     * @example true
                     */
                    in_stock?: boolean;
                    /**
                     * @description Product image URL.
                     * @example http://www.example.com/abc-123.png
                     */
                    image_url?: string;
                    /**
                     * @description Categories the product belongs to.
                     * @example shoes|sneakers
                     */
                    categories?: string;
                    /**
                     * @description Product description.
                     * @example The white sneakers that everybody wants
                     */
                    description?: string;
                    /**
                     * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
                     * @example 2018-02-12T17:05:12
                     */
                    publish_time?: string;
                    /**
                     * @description A list of keywords describing the product.
                     * @example tag1|tag2
                     */
                    keywords?: string;
                } & {
                    [key: string]: unknown;
                };
            };
        }[];
        /**
         * @description Type of action requested. Valid values are:<ul>`update` - Insert a new product or rewrite an entire product’s data<br>`partial` - Update specific fields for a single product<br>`delete` - Delete a product</ul>
         * @enum {string}
         */
        ProductFeedAction: "update" | "partial" | "delete";
        /** @description Single request body. */
        ProductFeedBody: {
            /** @description Product data. */
            data?: {
                /** @description SKU exactly as it appears in the product feed. */
                sku?: string;
                /**
                 * @description Product group ID.
                 * @example abc
                 */
                group_id?: string;
                /**
                 * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
                 * @example http://www.example.com/abc-123
                 */
                url?: string;
                /**
                 * @description Product name.
                 * @example white sneakers
                 */
                name?: string;
                /**
                 * @description unit.cents format using the section default currency.
                 * @example 23.99
                 */
                price?: number;
                /**
                 * @description Whether the product is in stock or in outage.
                 * @example true
                 */
                in_stock?: boolean;
                /**
                 * @description Product image URL.
                 * @example http://www.example.com/abc-123.png
                 */
                image_url?: string;
                /**
                 * @description Categories the product belongs to.
                 * @example shoes|sneakers
                 */
                categories?: string;
                /**
                 * @description Product description.
                 * @example The white sneakers that everybody wants
                 */
                description?: string;
                /**
                 * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
                 * @example 2018-02-12T17:05:12
                 */
                publish_time?: string;
                /**
                 * @description A list of keywords describing the product.
                 * @example tag1|tag2
                 */
                keywords?: string;
            } & {
                [key: string]: unknown;
            };
        };
        /** @description Product data. */
        ProductFeedData: {
            /** @description SKU exactly as it appears in the product feed. */
            sku?: string;
            /**
             * @description Product group ID.
             * @example abc
             */
            group_id?: string;
            /**
             * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
             * @example http://www.example.com/abc-123
             */
            url?: string;
            /**
             * @description Product name.
             * @example white sneakers
             */
            name?: string;
            /**
             * @description unit.cents format using the section default currency.
             * @example 23.99
             */
            price?: number;
            /**
             * @description Whether the product is in stock or in outage.
             * @example true
             */
            in_stock?: boolean;
            /**
             * @description Product image URL.
             * @example http://www.example.com/abc-123.png
             */
            image_url?: string;
            /**
             * @description Categories the product belongs to.
             * @example shoes|sneakers
             */
            categories?: string;
            /**
             * @description Product description.
             * @example The white sneakers that everybody wants
             */
            description?: string;
            /**
             * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
             * @example 2018-02-12T17:05:12
             */
            publish_time?: string;
            /**
             * @description A list of keywords describing the product.
             * @example tag1|tag2
             */
            keywords?: string;
        } & {
            [key: string]: unknown;
        };
    };
    responses: {
        /** @description Success. */
        Success: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Variation chosen successfully. */
        SuccessChoose: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The chosen variation for each campaign. */
                    choices?: ({
                        id?: string;
                        name?: string;
                        /** @default DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            name?: string;
                            payload?: {
                                /** @default CUSTOM_JSON */
                                type: string;
                                data?: Record<string, never>;
                            } | {
                                /** @default CUSTOM_JSON_CONTROL_GROUP_VARIATION */
                                type: string;
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                                variationName?: string;
                            };
                        }[];
                        groups?: string[];
                        decisionId?: string;
                        allocationGroup?: string;
                    } | {
                        id?: string;
                        name?: string;
                        /** @default RECS_DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            name?: string;
                            payload?: {
                                /** @default RECS */
                                type: string;
                                data?: {
                                    custom?: Record<string, never>;
                                    slots?: {
                                        sku?: string;
                                        slotId?: string;
                                        productData?: Record<string, never>;
                                    }[];
                                };
                            } | {
                                /** @default RECS_CONTROL_GROUP_VARIATION */
                                type: string;
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                                variationName?: string;
                            };
                        }[];
                        groups?: string[];
                        decisionId?: string;
                        allocationGroup?: string;
                    } | {
                        id?: string;
                        name?: string;
                        /** @default STORE_RECS_DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            name?: string;
                            payload?: {
                                /** @default STORE_RECS */
                                type: string;
                                data?: Record<string, never>;
                            } | {
                                /** @default STORE_RECS_CONTROL_GROUP_VARIATION */
                                type: string;
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                                variationName?: string;
                            };
                        }[];
                        groups?: string[];
                        decisionId?: string;
                        allocationGroup?: string;
                    } | {
                        name?: string;
                        id?: number;
                        /** @default SORTING_DECISION */
                        type: string;
                        decisionId?: string;
                        variations?: {
                            id?: number;
                            payload?: {
                                /** @default SORT */
                                type: string;
                                data?: {
                                    slots?: {
                                        sku?: string;
                                        slotId?: string;
                                    }[];
                                };
                            } | {
                                /** @default SORT_CONTROL_GROUP_VARIATION */
                                type: string;
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                /** @description The name of the variation as appears in the DY Admin or "Control Group Variation" */
                                variationName?: string;
                            };
                        }[];
                    })[];
                    /** @description Cookies returned from the server. */
                    cookies?: {
                        name?: string;
                        value?: string;
                        maxAge?: string;
                    }[];
                    /** @description Errors returned by the server. */
                    warnings?: {
                        code?: string;
                        message?: string;
                    }[];
                };
            };
        };
        /** @description Query results returned successfully. */
        SuccessSearch: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The chosen variation for each campaign. */
                    choices?: ({
                        id?: string;
                        /** @default Semantic Search */
                        name: string;
                        /** @default SEMANTIC_SEARCH_DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            payload?: {
                                /** @default SEARCH */
                                type: string;
                                data?: {
                                    totalNumResults?: number;
                                    facets?: ({
                                        column?: string;
                                        /** @enum {string} */
                                        valuesType?: "string";
                                        displayName?: string;
                                        values?: {
                                            name?: string;
                                            count?: number;
                                        }[];
                                    } | {
                                        column?: string;
                                        /** @enum {string} */
                                        valuesType?: "number";
                                        displayName?: string;
                                        min?: number;
                                        max?: number;
                                    })[];
                                    slots?: {
                                        slotId?: string;
                                        sku?: string;
                                    }[];
                                };
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                variationName?: string;
                            };
                        }[];
                        decisionId?: string;
                    } | {
                        id?: string;
                        /** @default Visual Search */
                        name: string;
                        /** @default VISUAL_SEARCH_DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            payload?: {
                                /** @default SEARCH */
                                type: string;
                                data?: {
                                    totalNumResults?: number;
                                    facets?: ({
                                        column?: string;
                                        /** @enum {string} */
                                        valuesType?: "string";
                                        displayName?: string;
                                        values?: {
                                            name?: string;
                                            count?: number;
                                        }[];
                                    } | {
                                        column?: string;
                                        /** @enum {string} */
                                        valuesType?: "number";
                                        displayName?: string;
                                        min?: number;
                                        max?: number;
                                    })[];
                                    slots?: {
                                        slotId?: string;
                                        sku?: string;
                                    }[];
                                };
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                variationName?: string;
                            };
                        }[];
                        decisionId?: string;
                    } | {
                        id?: string;
                        /** @default Shopping Muse */
                        name: string;
                        /** @default SHOPPING_MUSE_DECISION */
                        type: string;
                        variations?: {
                            id?: number;
                            payload?: {
                                /** @default SHOPPING_MUSE */
                                type: string;
                                data?: {
                                    assistant?: string;
                                    widgets?: {
                                        title?: string;
                                        slots?: {
                                            sku?: string;
                                            slotId?: string;
                                            productData?: Record<string, never>;
                                        }[];
                                    }[];
                                    support?: boolean;
                                    chatId?: string;
                                };
                            };
                            analyticsMetadata?: {
                                campaignId?: number;
                                campaignName?: string;
                                experienceId?: number;
                                experienceName?: string;
                                variationId?: number;
                                variationName?: string;
                            };
                        }[];
                        decisionId?: string;
                    })[];
                    /** @description Cookies returned from the server. */
                    cookies?: {
                        name?: string;
                        value?: string;
                        maxAge?: string;
                    }[];
                    /** @description Errors returned by the server. */
                    warnings?: {
                        code?: string;
                        message?: string;
                    }[];
                };
            };
        };
        /** @description Product feed udpated successfully. */
        SuccessProductFeed: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @description The update request's success status.
                     * @example true
                     */
                    success?: boolean;
                    /** @description Response body. */
                    data?: {
                        /**
                         * @description The ID for the update transaction. A transaction includes all individual items for which an update was requested.
                         * @example 3754b085584be8561926dabc32b359a0
                         */
                        transaction_id?: string;
                    };
                };
            };
        };
        /** @description User data updated. */
        SuccessUserData: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Result */
        ResultTransactionStatusSpecificItem: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "value": {
                 *         "item": "abc-123",
                 *         "status": "success",
                 *         "time": "2023-03-30T08:20:35.827+0000"
                 *       }
                 *     } */
                "application/json": {
                    /**
                     * @description The request item's ID.
                     * @example abc-123
                     */
                    item?: string;
                    /**
                     * @description Whether the item has been successfully updated.
                     * @example success
                     */
                    status?: string;
                    /**
                     * @description Timestamp for most recent status change.
                     * @example 2023-03-30T08:20:35.827+0000
                     */
                    time?: string;
                } & {
                    [key: string]: unknown;
                };
            };
        };
        /** @description Result */
        ResultTransactionStatus: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "value": [
                 *         {
                 *           "item": "abc-123",
                 *           "status": "success",
                 *           "time": "2023-03-30T08:20:35.827+0000"
                 *         },
                 *         {
                 *           "item": "abcde-123",
                 *           "status": "failed",
                 *           "time": "2023-03-30T08:20:23.324+0000",
                 *           "message": "failed"
                 *         },
                 *         {
                 *           "item": "abcd-123",
                 *           "status": "success",
                 *           "time": "2023-03-30T08:20:30.005+0000",
                 *           "message": "Item missing"
                 *         }
                 *       ]
                 *     } */
                "application/json": ({
                    /**
                     * @description The request item's ID.
                     * @example abc-123
                     */
                    item?: string;
                    /**
                     * @description Whether the item has been successfully updated.
                     * @example success
                     */
                    status?: string;
                    /**
                     * @description Timestamp for most recent status change.
                     * @example 2023-03-30T08:20:35.827+0000
                     */
                    time?: string;
                } & {
                    [key: string]: unknown;
                })[];
            };
        };
        /** @description Result */
        ResultUserProfile: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Branch not found. */
        NotFoundBranchFeed: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Unauthorized request. */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @description Error code.
                     * @example 401
                     */
                    error?: string;
                };
            };
        };
        /** @description Invalid request. */
        Invalid: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @description Error description.
                     * @example request must contain context page location
                     */
                    message?: string;
                    /**
                     * @description The type of error encountered.
                     * @example badRequest
                     */
                    type?: string;
                };
            };
        };
        /** @description Unprocessable Content - in the case of application/gzip content-type, the file is corrupt and cannot be unzipped. */
        InvalidBranchFeed: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Response with error. */
        InvalidUserData: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
    };
    parameters: {
        /**
         * @description The ID of the feed.
         * @example 85915
         */
        ProductFeedId: string;
        /**
         * @description The ID of the transaction received from an API call.
         * @example MDcyNWM0MTEtYWZlZS00MjdkLWExYmYtMDlhMWIwNGFjMzg4LWZpZC0yMTYxNi10cy0xNTg2NjgxOTE0MDYwLXQtcGFydGlhbA
         */
        ProductFeedTransactionId: string;
        /**
         * @description The ID of the item.
         * @example abc-123
         */
        ProductFeedItemId: string;
        /**
         * @description The branch ID.
         * @example 4012
         */
        BranchFeedId: string;
        /**
         * @description The data feed key. To get the key of an existing data feed, go to the data feed in Experience OS, click Edit, and copy the key.
         * @example 114f64059571a124de146311f2256f2
         */
        UserDataFeedKey: string;
        /**
         * @description The user's unique identifier.
         * @example 13510582476552222
         */
        UserProfileCuid: string;
        /** @description Use `he` for hashed email addresses or use your custom identifier type. */
        UserProfileCuidType: string;
        /**
         * @description Whether to receive affinity data for the user.
         * @example true
         */
        UserProfileAffinity: boolean;
    };
    requestBodies: {
        ChooseBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                        /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                        pageAttributes?: {
                            [key: string]: string | number;
                        };
                        /**
                         * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
                         * @example [
                         *       "SKU1",
                         *       "SKU2"
                         *     ]
                         */
                        listedItems?: string[];
                        /** @description The branch where the user experience is taking place. */
                        branch?: {
                            /** @description The branch's unique identifier. */
                            id: string;
                        };
                    };
                    /**
                     * Selector
                     * @description Campaigns to choose variations for.
                     */
                    selector: {
                        /**
                         * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                         * @example [
                         *       "Banner Main",
                         *       "German Banner",
                         *       "PDP Recs Tray"
                         *     ]
                         */
                        names: string[];
                        /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                        groups?: string[];
                        /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                        preview?: {
                            /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                            ids: string[];
                        };
                        /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                        args?: {
                            [key: string]: {
                                /** @description A list of realtime filtering rules. */
                                realtimeRules?: {
                                    /**
                                     * @description Valid values are: `include`, `exclude`.
                                     * @enum {string}
                                     */
                                    type?: "include" | "exclude";
                                    /** @description All or specific slot positions. The first slot is in position 0. */
                                    slots?: number[];
                                    /** @description The filtering query. */
                                    query?: {
                                        /** @description The realtime rule's query conditions. */
                                        conditions?: {
                                            /**
                                             * @description Field within the returned results to apply the query for.
                                             * @example categories
                                             */
                                            field: string;
                                            /** @description A list of arguments for a query condition. */
                                            arguments: {
                                                /**
                                                 * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                                 * @enum {string}
                                                 */
                                                action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                                /**
                                                 * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                                 * @example basketball
                                                 */
                                                value: unknown;
                                            }[];
                                        }[];
                                    };
                                }[];
                            };
                        };
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                         * @default false
                         */
                        isImplicitPageview?: boolean;
                        /**
                         * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                         * @default false
                         */
                        returnAnalyticsMetadata?: boolean;
                        /**
                         * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
                         * @default true
                         */
                        isImplicitImpressionMode?: boolean;
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                        recsProductData?: {
                            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                            fieldFilter?: string[];
                            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                            skusOnly?: boolean;
                        };
                    };
                } | (unknown & {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                        /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                        pageAttributes?: {
                            [key: string]: string | number;
                        };
                        /**
                         * @description List of SKUs to sort on PLP. Use only for Sorting Optimizer campaigns.
                         * @example [
                         *       "SKU1",
                         *       "SKU2"
                         *     ]
                         */
                        listedItems?: string[];
                        /** @description The branch where the user experience is taking place. */
                        branch?: {
                            /** @description The branch's unique identifier. */
                            id: string;
                        };
                    };
                    /**
                     * Selector
                     * @description Campaigns to choose variations for.
                     */
                    selector: {
                        /**
                         * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                         * @example [
                         *       "Banner Main",
                         *       "German Banner",
                         *       "PDP Recs Tray"
                         *     ]
                         */
                        names: string[];
                        /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                        groups?: string[];
                        /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                        preview?: {
                            /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                            ids: string[];
                        };
                        /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                        args?: {
                            [key: string]: {
                                /** @description A list of realtime filtering rules. */
                                realtimeRules?: {
                                    /**
                                     * @description Valid values are: `include`, `exclude`.
                                     * @enum {string}
                                     */
                                    type?: "include" | "exclude";
                                    /** @description All or specific slot positions. The first slot is in position 0. */
                                    slots?: number[];
                                    /** @description The filtering query. */
                                    query?: {
                                        /** @description The realtime rule's query conditions. */
                                        conditions?: {
                                            /**
                                             * @description Field within the returned results to apply the query for.
                                             * @example categories
                                             */
                                            field: string;
                                            /** @description A list of arguments for a query condition. */
                                            arguments: {
                                                /**
                                                 * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                                 * @enum {string}
                                                 */
                                                action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                                /**
                                                 * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                                 * @example basketball
                                                 */
                                                value: unknown;
                                            }[];
                                        }[];
                                    };
                                }[];
                            };
                        };
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                         * @default false
                         */
                        isImplicitPageview?: boolean;
                        /**
                         * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                         * @default false
                         */
                        returnAnalyticsMetadata?: boolean;
                        /**
                         * @description Report an impression of the chosen variation. This is set to `true` by default, which means that the user's impression of the variation is reported immediately when the variation is chosen. Pass this as `false` to report the impression explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call.
                         * @default true
                         */
                        isImplicitImpressionMode?: boolean;
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                        recsProductData?: {
                            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                            fieldFilter?: string[];
                            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                            skusOnly?: boolean;
                        };
                    };
                }) | {
                    user: {
                        /**
                         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                         * @default true
                         */
                        sharedDevice: boolean;
                        /** @description User identifier value. Required for identified user flows. */
                        cuid?: string;
                        /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.**<br>Required for identified user flows. */
                        cuidType?: string;
                    } | (unknown & {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    } & {
                        /**
                         * @description Set to `false` for transactions made on personal devices.
                         * @default false
                         */
                        sharedDevice: boolean;
                    });
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page?: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                             * @enum {string}
                             */
                            type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime: string;
                            /** @description The identifier of the device in the branch. */
                            id?: string;
                        };
                        /** @description Use to recommend only items in stock at the branch the user is browsing. */
                        branch: {
                            /** @description The ID of the branch the recommendation is for. */
                            id?: string;
                            /**
                             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                             * @enum {string}
                             */
                            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                            /**
                             * @description The fulfillment type of the order the request relates to.
                             * @enum {string}
                             */
                            orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
                        };
                        /**
                         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                         * @enum {string}
                         */
                        channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                        /** @description Personalize campaigns based on cart state.<br>**Required when basket-based strategies and rules are being used.** */
                        cart?: {
                            /** @description The product ID from the restaurant product catalog. */
                            productId: string;
                            /** @description Number of items. */
                            quantity?: number;
                            /**
                             * @description unit.cents format using the section default currency.
                             * @example 23.99
                             */
                            itemPrice?: number;
                            /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                            innerProducts?: {
                                /** @description The product ID from the restaurant product catalog. */
                                productId: string;
                                /** @description Number of items. */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        }[];
                        /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                        pageAttributes?: {
                            [key: string]: string | number;
                        };
                    };
                    /**
                     * Selector
                     * @description Campaigns to choose variations for.
                     */
                    selector: {
                        /**
                         * @description The list of selectors that are eligible for this page. A selector represents a technical name for a campaign. Learn more about [using selectors in your campaigns](https://dy.dev/docs/choose#recommended-use).
                         * @example [
                         *       "Banner Main",
                         *       "German Banner",
                         *       "PDP Recs Tray"
                         *     ]
                         */
                        names: string[];
                        /** @description Call a group of selectors instead of listing each selector individually. Learn more about working with [selector groups](https://dy.dev/docs/selector-groups). */
                        groups?: string[];
                        /** @description Campaigns to generate previews for. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                        preview?: {
                            /** @description Array of preview tokens, as provided in the `dyApiPreview` URL parameter. [Learn more about enabling preview mode](https://dy.dev/docs/preview-api-web#enabling-preview-mode). */
                            ids: string[];
                        };
                        /** @description Real-time filters for recommendation results, based on data obtained within the session. Learn more about working with [real-time filters](https://dy.dev/docs/return-real-time-filter-data). */
                        args?: {
                            [key: string]: {
                                /** @description A list of realtime filtering rules. */
                                realtimeRules?: {
                                    /**
                                     * @description Valid values are: `include`, `exclude`.
                                     * @enum {string}
                                     */
                                    type?: "include" | "exclude";
                                    /** @description All or specific slot positions. The first slot is in position 0. */
                                    slots?: number[];
                                    /** @description The filtering query. */
                                    query?: {
                                        /** @description The realtime rule's query conditions. */
                                        conditions?: {
                                            /**
                                             * @description Field within the returned results to apply the query for.
                                             * @example categories
                                             */
                                            field: string;
                                            /** @description A list of arguments for a query condition. */
                                            arguments: {
                                                /**
                                                 * @description Condition types for filtering recommendations. Valid values are:<ul>`IS` - string or boolean<br>`IS_NOT` - string<br>`CONTAINS` - A filtering rule may contain up to 10 queries of this type<br>`EQ`, `GT`, `GTE`, `LT`, `LTE` - number only
                                                 * @enum {string}
                                                 */
                                                action: "IS" | "IS_NOT" | "CONTAINS" | "EQ" | "GT" | "GTE" | "LT" | "LTE";
                                                /**
                                                 * @description Parameter for filter value by condition. Regular expressions are not supported for real-time filters (can and should be added as additional conditions to the filter).
                                                 * @example basketball
                                                 */
                                                value: unknown;
                                            }[];
                                        }[];
                                    };
                                }[];
                            };
                        };
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description Determine whether to report a new pageview with the given context. Default is `false`. Set to `true` to report a new pageview with the given context. Keep as `false` if the Dynamic Yield script is implemented on the page. It reports the new pageview from the browser.
                         * @default false
                         */
                        isImplicitPageview?: boolean;
                        /**
                         * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                         * @default false
                         */
                        returnAnalyticsMetadata?: boolean;
                        /**
                         * @description Report an impression of the chosen variation. For Restaurants, this is set to `false` by default, which means that impressions should be reported explicitly in an [Engagement](https://dy.dev/docs/engagement#types-of-engagement) call. Pass this as `true` in case the user's impression of the variation should be reported immediately when the variation is chosen.
                         * @default false
                         */
                        isImplicitImpressionMode?: boolean;
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                        recsProductData?: {
                            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                            fieldFilter?: string[];
                            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                            skusOnly?: boolean;
                        };
                    };
                };
            };
        };
        SearchBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used. For new sessions, send this object empty.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    query: {
                        /** @description The user's input text that specifies what should be searched. */
                        text: string;
                        /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
                        filters?: ({
                            /** @description Column name, as reported in the product feed. */
                            field: string;
                            /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                            min?: number;
                            /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                            max?: number;
                        } | {
                            /** @description Column name, as reported in the product feed. */
                            field: string;
                            /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                            values?: string[];
                        })[];
                        /** @description Pagination parameters for the query result. */
                        pagination: {
                            /** @description The number of items to be returned in the query result. */
                            numItems: number;
                            /** @description The starting offset. */
                            offset: number;
                        };
                    } | {
                        /** @description A base64 representation of the input image. */
                        imageBase64: string;
                        /** @description Parameters to filter the search results. When multiple filters are applied, only records matching all specified criteria (`AND` logic) are returned. */
                        filters?: ({
                            /** @description Column name, as reported in the product feed. */
                            field: string;
                            /** @description Minimum value (e.g from `price`), for product feed numeric and date values. */
                            min?: number;
                            /** @description Maximum value (e.g from `price`), for product feed numeric and date values. */
                            max?: number;
                        } | {
                            /** @description Column name, as reported in the product feed. */
                            field: string;
                            /** @description Possible values for the filter column. When multiple values are specified, results matching any of the values (`OR` logic) will be returned. */
                            values?: string[];
                        })[];
                    } | {
                        /** @description The user's prompt that specifies a search request, question or an answer. */
                        text: string;
                        /** @description A unique identifier used to maintain conversational context. Include `chatId` when sending follow-up requests related to the response that contains it. */
                        chatId?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                        /** @description Pass key-value pairs you want to use for targeting in this campaign. **The value must exactly match the value in the campaign targeting condition, and is case sensitive.** This data is not stored and cannot be used for creating audiences. Values can be strings or numbers. */
                        pageAttributes?: {
                            [key: string]: string | number;
                        };
                        /** @description The branch where the user experience is taking place. */
                        branch?: {
                            /** @description The branch's unique identifier. */
                            id: string;
                        };
                    };
                    /**
                     * Selector
                     * @description Campaigns to choose variations for.
                     */
                    selector: {
                        /**
                         * @description The selector name for the applicable search campaign. Must be one of the following:<ul><li>`Semantic Search`</li><li>`Visual Search`</li><li>`Shopping Muse`</li></ul>
                         * @enum {string}
                         */
                        name: "Semantic Search" | "Visual Search" | "Shopping Muse";
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description Set to `true` to return additional metadata (display names & IDs for all entities) for reporting to analytics tools.
                         * @default false
                         */
                        returnAnalyticsMetadata?: boolean;
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                        /** @description You can use *either* the `fieldFilter` param to ask for specific attributes from the feed, *or* the `skusOnly` param to to fetch only the SKUs. */
                        recsProductData?: {
                            /** @description Specify the fields you need in the recommendation campaign response by using the `fieldFilter` parameter. Simply send an array of strings of the relevant fields, and only those fields and values are sent back. */
                            fieldFilter?: string[];
                            /** @description To reduce the size of the response, you can limit it so that it only includes the SKUs. */
                            skusOnly?: boolean;
                        };
                    };
                };
            };
        };
        PageviewBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                    };
                } | (unknown & {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                    };
                });
            };
        };
        EngagementBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                         * @enum {string}
                         */
                        type: "CLICK" | "IMP";
                        /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                        decisionId: string;
                        /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                        variations: number[];
                    } | {
                        /**
                         * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                         * @enum {string}
                         */
                        type: "PN_CLICK";
                        /**
                         * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                         * @example {
                         *       "rri": "987001424",
                         *       "sectionID": "9878785",
                         *       "reqTs": "1652622484055",
                         *       "userID": "4656722918296846673",
                         *       "version": "2",
                         *       "events": [
                         *         {
                         *           "ver": "101482916",
                         *           "expVisitId": "4032971100745578591",
                         *           "smech": "",
                         *           "vars": "[101098971]",
                         *           "exp": "1296028",
                         *           "mech": "1"
                         *         }
                         *       ]
                         *     }
                         */
                        trackingData: {
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 987001424
                             */
                            rri?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 9878785
                             */
                            sectionID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 1652622484055
                             */
                            reqTs?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 4656722918296846673
                             */
                            userID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 2
                             */
                            version?: string;
                            /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                            events?: {
                                /** @example 101482916 */
                                ver?: string;
                                /** @example 4032971100745578591 */
                                expVisitId?: string;
                                /** @example  */
                                smech?: string;
                                vars?: string[];
                                /** @example 1296028 */
                                exp?: string;
                                /** @example 1 */
                                mech?: string;
                            }[];
                        };
                    })[];
                } | (unknown & {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                         * @enum {string}
                         */
                        type: "CLICK" | "IMP";
                        /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                        decisionId: string;
                        /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                        variations: number[];
                    } | {
                        /**
                         * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                         * @enum {string}
                         */
                        type: "PN_CLICK";
                        /**
                         * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                         * @example {
                         *       "rri": "987001424",
                         *       "sectionID": "9878785",
                         *       "reqTs": "1652622484055",
                         *       "userID": "4656722918296846673",
                         *       "version": "2",
                         *       "events": [
                         *         {
                         *           "ver": "101482916",
                         *           "expVisitId": "4032971100745578591",
                         *           "smech": "",
                         *           "vars": "[101098971]",
                         *           "exp": "1296028",
                         *           "mech": "1"
                         *         }
                         *       ]
                         *     }
                         */
                        trackingData: {
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 987001424
                             */
                            rri?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 9878785
                             */
                            sectionID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 1652622484055
                             */
                            reqTs?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 4656722918296846673
                             */
                            userID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 2
                             */
                            version?: string;
                            /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                            events?: {
                                /** @example 101482916 */
                                ver?: string;
                                /** @example 4032971100745578591 */
                                expVisitId?: string;
                                /** @example  */
                                smech?: string;
                                vars?: string[];
                                /** @example 1296028 */
                                exp?: string;
                                /** @example 1 */
                                mech?: string;
                            }[];
                        };
                    })[];
                }) | {
                    user: {
                        /**
                         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                         * @default true
                         */
                        sharedDevice: boolean;
                    } | (unknown & {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    } & {
                        /**
                         * @description Set to `false` for transactions made on personal devices.
                         * @default false
                         */
                        sharedDevice: boolean;
                    });
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /** @description Use to recommend only items in stock at the branch the user is browsing. */
                        branch: {
                            /** @description The ID of the branch the recommendation is for. */
                            id: string;
                            /**
                             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                             * @enum {string}
                             */
                            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                        };
                        /**
                         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                         * @enum {string}
                         */
                        channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass `SLOT_CLICK`.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation. Pass the Slot ID for the clicked product as returned in the `/choose` response. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass `SLOT_IMP`.
                         * @enum {string}
                         */
                        type: "SLOT_IMP";
                        /** @description Use to report impressions of an API recommendation. Pass the Slot IDs for the products as returned in the `/choose` response. */
                        slotIds: string[];
                    })[];
                };
            };
        };
        EventBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-cart-v1`.
                             * @default add-to-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 98.8
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `remove-from-cart-v1`.
                             * @default remove-from-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sync-cart-v1`.
                             * @default sync-cart-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `identify-v1`.
                             * @default identify-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `login-v1`.
                             * @default login-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `signup-v1`. */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `newsletter-subscription-v1`.
                             * @default newsletter-subscription-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optin-v1`.
                             * @default message-optin-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optout-v1`.
                             * @default message-optout-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `keyword-search-v1`.
                             * @default keyword-search-v1
                             */
                            dyType: string;
                            /**
                             * @description The search string.
                             * @example contact info
                             */
                            keywords: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-wishlist-v1`.
                             * @default add-to-wishlist-v1
                             */
                            dyType: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            /**
                             * @description Product size.
                             * @example L
                             */
                            size?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `filter-items-v1`.
                             * @default filter-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                             * @example color
                             */
                            filterType: string;
                            /**
                             * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                             * @example 20
                             */
                            filterNumericValue?: number;
                            /**
                             * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                             * @example Gray
                             */
                            filterStringValue?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `change-attribute-v1`.
                             * @default change-attr-v1
                             */
                            dyType: string;
                            /**
                             * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                             * @example Color
                             */
                            attributeType: string;
                            /**
                             * @description The new value (for example, new color is Gray).
                             * @example Navy Blue
                             */
                            attributeValue: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `video-watch-v1`.
                             * @default video-watch-v1
                             */
                            dyType: string;
                            /**
                             * @description ID that matches an item ID in the content feed.
                             * @example 33849492012003
                             */
                            itemId: string;
                            /**
                             * @description *Optional*
                             * @example [
                             *       "Sports",
                             *       "Baseball"
                             *     ]
                             */
                            categories?: string[];
                            /**
                             * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                             * @default false
                             */
                            autoplay: boolean;
                            /**
                             * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                             * @example VIDEO_STARTED
                             * @enum {string}
                             */
                            progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                            /**
                             * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                             * @example 65
                             */
                            progressPercent: number;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sort-items-v1`.
                             * @default sort-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                             * @example price
                             */
                            sortBy: string;
                            /**
                             * @description `ASC` or `DESC`.
                             * @example ASC
                             */
                            sortOrder: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `enter-promo-code-v1`.
                             * @default enter-promo-code-v1
                             */
                            dyType: string;
                            /**
                             * @description The promo code.
                             * @example SPECIALOFFER
                             */
                            code: string;
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    })[];
                } | {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-cart-v1`.
                             * @default add-to-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `remove-from-cart-v1`.
                             * @default remove-from-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sync-cart-v1`.
                             * @default sync-cart-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `identify-v1`.
                             * @default identify-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `login-v1`.
                             * @default login-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `signup-v1`. */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `newsletter-subscription-v1`.
                             * @default newsletter-subscription-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optin-v1`.
                             * @default message-optin-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optout-v1`.
                             * @default message-optout-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `keyword-search-v1`.
                             * @default keyword-search-v1
                             */
                            dyType: string;
                            /**
                             * @description The search string.
                             * @example contact info
                             */
                            keywords: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-wishlist-v1`.
                             * @default add-to-wishlist-v1
                             */
                            dyType: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            /**
                             * @description Product size.
                             * @example L
                             */
                            size?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `filter-items-v1`.
                             * @default filter-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                             * @example color
                             */
                            filterType: string;
                            /**
                             * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                             * @example 20
                             */
                            filterNumericValue?: number;
                            /**
                             * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                             * @example Gray
                             */
                            filterStringValue?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `change-attribute-v1`.
                             * @default change-attr-v1
                             */
                            dyType: string;
                            /**
                             * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                             * @example Color
                             */
                            attributeType: string;
                            /**
                             * @description The new value (for example, new color is Gray).
                             * @example Navy Blue
                             */
                            attributeValue: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `video-watch-v1`.
                             * @default video-watch-v1
                             */
                            dyType: string;
                            /**
                             * @description ID that matches an item ID in the content feed.
                             * @example 33849492012003
                             */
                            itemId: string;
                            /**
                             * @description *Optional*
                             * @example [
                             *       "Sports",
                             *       "Baseball"
                             *     ]
                             */
                            categories?: string[];
                            /**
                             * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                             * @default false
                             */
                            autoplay: boolean;
                            /**
                             * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                             * @example VIDEO_STARTED
                             * @enum {string}
                             */
                            progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                            /**
                             * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                             * @example 65
                             */
                            progressPercent: number;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sort-items-v1`.
                             * @default sort-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                             * @example price
                             */
                            sortBy: string;
                            /**
                             * @description `ASC` or `DESC`.
                             * @example ASC
                             */
                            sortOrder: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `enter-promo-code-v1`.
                             * @default enter-promo-code-v1
                             */
                            dyType: string;
                            /**
                             * @description The promo code.
                             * @example SPECIALOFFER
                             */
                            code: string;
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    })[];
                } | {
                    user: {
                        /**
                         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                         * @default true
                         */
                        sharedDevice: boolean;
                    } | (unknown & {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    } & {
                        /**
                         * @description Set to `false` for transactions made on personal devices.
                         * @default false
                         */
                        sharedDevice: boolean;
                    });
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                             * @enum {string}
                             */
                            type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /** @description The identifier of the device in the branch. */
                            id?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime?: string;
                        };
                        /** @description Use to recommend only items in stock at the branch the user is browsing. */
                        branch: {
                            /** @description The ID of the branch the recommendation is for. */
                            id: string;
                            /**
                             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                             * @enum {string}
                             */
                            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                            /**
                             * @description The fulfillment type of the order the request relates to.
                             * @enum {string}
                             */
                            orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
                        };
                        /**
                         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                    };
                    /** @description One or more events to report. */
                    events: {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description The product ID from the restaurant product catalog. */
                                productId: string;
                                /** @description Number of items. */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                                /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                                innerProducts?: {
                                    /** @description The product ID from the restaurant product catalog. */
                                    productId: string;
                                    /** @description Number of items. */
                                    quantity?: number;
                                    /**
                                     * @description unit.cents format using the section default currency.
                                     * @example 23.99
                                     */
                                    itemPrice?: number;
                                }[];
                            }[];
                        };
                    }[];
                };
            };
        };
        ProductFeedBody: {
            content: {
                /** @example {
                 *       "value": {
                 *         "requests": [
                 *           {
                 *             "id": "abc-123",
                 *             "action": "UPDATE",
                 *             "body": {
                 *               "data": {
                 *                 "sku": "abc-123",
                 *                 "group_id": "abc",
                 *                 "url": "http://www.example.com/abc-123",
                 *                 "name": "white sneakers",
                 *                 "price": 29.99,
                 *                 "in_stock": true,
                 *                 "image_url": "http://www.example.com/abc-123.png",
                 *                 "categories": "shoes|sneakers",
                 *                 "description": "The white sneakers that everybody wants",
                 *                 "publish_time": "2018-02-12T17:05:12",
                 *                 "keywords": "tag1|tag2",
                 *                 "any_other_field": "any other value"
                 *               }
                 *             }
                 *           },
                 *           {
                 *             "id": "abcd-123",
                 *             "action": "delete"
                 *           },
                 *           {
                 *             "id": "abcde-123",
                 *             "action": "partial",
                 *             "body": {
                 *               "data": {
                 *                 "price": 39.99
                 *               }
                 *             }
                 *           }
                 *         ]
                 *       }
                 *     } */
                "application/json": {
                    /** @description A list of product feed action requests. */
                    requests: {
                        /** @description SKU exactly as it appears in the product feed. */
                        id: string;
                        /**
                         * @description Type of action requested. Valid values are:<ul>`update` - Insert a new product or rewrite an entire product’s data<br>`partial` - Update specific fields for a single product<br>`delete` - Delete a product</ul>
                         * @enum {string}
                         */
                        action: "update" | "partial" | "delete";
                        /** @description Single request body. */
                        body?: {
                            /** @description Product data. */
                            data?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                sku?: string;
                                /**
                                 * @description Product group ID.
                                 * @example abc
                                 */
                                group_id?: string;
                                /**
                                 * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
                                 * @example http://www.example.com/abc-123
                                 */
                                url?: string;
                                /**
                                 * @description Product name.
                                 * @example white sneakers
                                 */
                                name?: string;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                price?: number;
                                /**
                                 * @description Whether the product is in stock or in outage.
                                 * @example true
                                 */
                                in_stock?: boolean;
                                /**
                                 * @description Product image URL.
                                 * @example http://www.example.com/abc-123.png
                                 */
                                image_url?: string;
                                /**
                                 * @description Categories the product belongs to.
                                 * @example shoes|sneakers
                                 */
                                categories?: string;
                                /**
                                 * @description Product description.
                                 * @example The white sneakers that everybody wants
                                 */
                                description?: string;
                                /**
                                 * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
                                 * @example 2018-02-12T17:05:12
                                 */
                                publish_time?: string;
                                /**
                                 * @description A list of keywords describing the product.
                                 * @example tag1|tag2
                                 */
                                keywords?: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    }[];
                };
            };
        };
        BranchFeedBody: {
            content: {
                "application/json": {
                    /** @description A list of products to be updated. */
                    products: {
                        /**
                         * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                         * @example A123
                         */
                        sku: string;
                        /**
                         * @description Whether the product is available in the specific branch or not. Unavailable products will not be recommended.
                         * @example true
                         */
                        availability: boolean;
                        /**
                         * @description The price of the product that is used in the specific branch.
                         * @example 3.14
                         */
                        price: number;
                        /** @description A local variation of the product name, if exists in the specific branch. */
                        name?: string;
                        /** @description The SKUs of all the products that can be added onto the main product, and the permitted quantities. */
                        addons?: {
                            /**
                             * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                             * @example A123
                             */
                            sku: string;
                            /**
                             * @description The default quantity of this ingredient (add on) inside the parent product.
                             * @example 1
                             */
                            default_quantity?: number;
                            /**
                             * @description The minimum quantity of this ingredient (add on) inside the parent product.
                             * @example 0
                             */
                            min_quantity?: number;
                            /**
                             * @description The maximum quantity of this ingredient (add on) inside the parent product.
                             * @example 3
                             */
                            max_quantity?: number;
                            /**
                             * @description The amount from which the QSR is going to charge for the addition of the add on.
                             * @example 1
                             */
                            charge_threshold?: number;
                        }[];
                    }[];
                };
            };
        };
        OutageBody: {
            content: {
                "application/json": {
                    /** @description A list of outage reports per branch. */
                    outages: {
                        /** @description The ID of the branch the recommendation is for. */
                        branchId: string;
                        /** @description A list of out-of-stock product IDs */
                        products: string[];
                    }[];
                };
            };
        };
        UserDataBody: {
            content: {
                /** @example {
                 *       "value": {
                 *         "requests": [
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "myuser123",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2021-07-24T13:44:17+02:00",
                 *             "data": {
                 *               "VIP": "T",
                 *               "contacts_buyer": "T",
                 *               "premium_score": 0.8,
                 *               "segment_name": null,
                 *               "last_visit": "2020-05-16T05:50:06-05:00"
                 *             }
                 *           },
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "myuser456",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2021-07-24T13:45:52+02:00",
                 *             "data": {
                 *               "VIP": "F",
                 *               "contacts_buyer": "T",
                 *               "premium_score": 0.3
                 *             }
                 *           },
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "0c907031b7d6515ce8def68a767272d0ec7225e987c3e0ce70b985c265f318f0",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2023-07-02T10:44:44+02:00",
                 *             "data": {
                 *               "UserSegments": [
                 *                 "segment 1",
                 *                 "segment 2"
                 *               ]
                 *             }
                 *           },
                 *           {
                 *             "action": "delete",
                 *             "cuid": "myuser789",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2022-05-24T12:31:09+02:00"
                 *           }
                 *         ]
                 *       }
                 *     } */
                "application/json": {
                    /** @description A list of user data update requests to be executed. */
                    requests: ({
                        /**
                         * @description Use `upsert` to add user data.
                         * @example upsert
                         * @enum {string}
                         */
                        action: "upsert";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                        /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
                        data: {
                            [key: string]: unknown;
                        };
                    } | {
                        /**
                         * @description Use `delete` to remove data.
                         * @example delete
                         * @enum {string}
                         */
                        action: "delete";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                    } | {
                        /**
                         * @description Use `array_add` and `array_remove` to edit data in existing arrays.
                         * @example array_add
                         * @enum {string}
                         */
                        action: "array_add" | "array_remove";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                        data: {
                            [key: string]: string[];
                        } | {
                            [key: string]: number[];
                        };
                    })[];
                };
            };
        };
        ExternalEventsBody: {
            content: {
                "application/json": {
                    /** @description User's identifying details. */
                    user: {
                        /**
                         * @description User identifier value. Max 250 characters.
                         * @enum {string}
                         */
                        cuid: "demo@email.com" | "123456789";
                        cuidType: string & unknown;
                    };
                    /** @description Data for the served device. */
                    device?: {
                        /**
                         * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                         * @example 54.100.200.255
                         */
                        ip?: string;
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name: string;
                        properties: Record<string, never> & {
                            /**
                             * @description Must be `offline-purchase-v1`.
                             * @default offline-purchase-v1
                             * @example offline-purchase-v1
                             */
                            dyType: string;
                            uniqueTransactionId: string & unknown;
                            /**
                             * @description The source where the transaction occurred, usually the physical store ID.
                             * @example f877e8a9dbb
                             */
                            transactionSource?: string;
                            /**
                             * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
                             * @example 2018-09-23T07:29:51+00:00
                             */
                            transactionDatetime: string;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            cart: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId: string;
                                /** @description Number of items. */
                                quantity: number;
                                itemPrice: number & unknown;
                                /**
                                 * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
                                 * @example 23.99
                                 */
                                transactionItemValue: number;
                                /**
                                 * @description Product size.
                                 * @example L
                                 */
                                size?: string;
                                /** @description **For restaurants only.** Indicate any inner products within the main product. */
                                innerProducts?: {
                                    /** @description SKU exactly as it appears in the product feed. */
                                    productId: string;
                                    /** @description Number of items. */
                                    quantity?: number;
                                    /**
                                     * @description unit.cents format using the section default currency.
                                     * @example 23.99
                                     */
                                    itemPrice?: number;
                                }[];
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    })[];
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    trackPageviews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                    };
                } | (unknown & {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies. For a new user, send this object empty.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the page currently being browsed. */
                        page: {
                            /**
                             * @description Page type. Must be upper case. Valid values are:<br>`HOMEPAGE`, `CATEGORY`, `PRODUCT`, `CART`, and `OTHER`.
                             * @example HOMEPAGE
                             * @enum {string}
                             */
                            type: "HOMEPAGE" | "CATEGORY" | "PRODUCT" | "CART" | "OTHER";
                            /**
                             * @description Additional data for non-homepage pages: The SKU for a `PRODUCT` page, the category for a `CATEGORY` page, SKUs for the `CART` page, and the page ID in `OTHER`. Learn more about [page context data](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example [
                             *       "p76311-020"
                             *     ]
                             */
                            data?: string[];
                            /**
                             * @description The current location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the current page/screen.
                             * @example https://shop.biz/nice-shirt-p76311.html
                             */
                            location: string;
                            /**
                             * @description The previous location. URL (for web), location (for SPA), or screen name (for mobile apps). Enables targeting the previous page/screen.
                             * @example https://google.cz
                             */
                            referrer?: string;
                            /**
                             * @description Page locale code, such as `en_US`. Learn more about [using country codes for locale](https://dy.dev/docs/page-context#localization-in-page-context).
                             * @example en_US
                             */
                            locale?: string;
                        };
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description For web clients, the browser user-agent string. If not passed, the API gateway checks for the header in the HTTPS request.
                             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
                             */
                            userAgent?: string;
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`
                             * @enum {string}
                             */
                            type?: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK";
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`Chrome`, `Firefox`, `Opera`, `Safari`, `Other`
                             * @example Firefox
                             * @enum {string}
                             */
                            browser?: "Chrome" | "Firefox" | "Opera" | "Safari" | "Other";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /**
                     * Options
                     * @description Request configuration parameters.
                     */
                    options?: {
                        /**
                         * @description For APIs called from the client-side only. When set to `true`, this acts as a fallback if the IP address or user agent isn't sent explicitly. Takes the values from the request header.
                         * @default false
                         */
                        isImplicitClientData?: boolean;
                    };
                });
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pageviews reported successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized request. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error code.
                         * @example 401
                         */
                        error?: string;
                    };
                };
            };
            /** @description Invalid request. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    trackEngagement: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                         * @enum {string}
                         */
                        type: "CLICK" | "IMP";
                        /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                        decisionId: string;
                        /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                        variations: number[];
                    } | {
                        /**
                         * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                         * @enum {string}
                         */
                        type: "PN_CLICK";
                        /**
                         * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                         * @example {
                         *       "rri": "987001424",
                         *       "sectionID": "9878785",
                         *       "reqTs": "1652622484055",
                         *       "userID": "4656722918296846673",
                         *       "version": "2",
                         *       "events": [
                         *         {
                         *           "ver": "101482916",
                         *           "expVisitId": "4032971100745578591",
                         *           "smech": "",
                         *           "vars": "[101098971]",
                         *           "exp": "1296028",
                         *           "mech": "1"
                         *         }
                         *       ]
                         *     }
                         */
                        trackingData: {
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 987001424
                             */
                            rri?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 9878785
                             */
                            sectionID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 1652622484055
                             */
                            reqTs?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 4656722918296846673
                             */
                            userID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 2
                             */
                            version?: string;
                            /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                            events?: {
                                /** @example 101482916 */
                                ver?: string;
                                /** @example 4032971100745578591 */
                                expVisitId?: string;
                                /** @example  */
                                smech?: string;
                                vars?: string[];
                                /** @example 1296028 */
                                exp?: string;
                                /** @example 1 */
                                mech?: string;
                            }[];
                        };
                    })[];
                } | (unknown & {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass the value `CLICK` or `IMP` (impressions) for API custom code campaigns.
                         * @enum {string}
                         */
                        type: "CLICK" | "IMP";
                        /** @description **Required for reporting `CLICK` or `IMP`:** The unique Decision ID as returned from the `/choose` endpoint. */
                        decisionId: string;
                        /** @description Use to report explicit impressions over custom code campaigns that return multiple variations on each decision (for example, a slider). Values are variation IDs. */
                        variations: number[];
                    } | {
                        /**
                         * @description Pass the value `SLOT_CLICK` for API recommendation campaigns.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation or a search result. Pass the Slot ID for the clicked product as returned in the `/choose` response. Do not use for for API custom code campaigns. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass the value `PN_CLICK` for Reconnect push notification campaigns.
                         * @enum {string}
                         */
                        type: "PN_CLICK";
                        /**
                         * @description Enables Dynamic Yield to track actions attributable to the push notification. Must be extracted from messaging provider. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/13472246286749-Create-a-Reconnect-Campaign#tracklink).
                         * @example {
                         *       "rri": "987001424",
                         *       "sectionID": "9878785",
                         *       "reqTs": "1652622484055",
                         *       "userID": "4656722918296846673",
                         *       "version": "2",
                         *       "events": [
                         *         {
                         *           "ver": "101482916",
                         *           "expVisitId": "4032971100745578591",
                         *           "smech": "",
                         *           "vars": "[101098971]",
                         *           "exp": "1296028",
                         *           "mech": "1"
                         *         }
                         *       ]
                         *     }
                         */
                        trackingData: {
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 987001424
                             */
                            rri?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 9878785
                             */
                            sectionID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 1652622484055
                             */
                            reqTs?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 4656722918296846673
                             */
                            userID?: string;
                            /**
                             * @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J).
                             * @example 2
                             */
                            version?: string;
                            /** @description One of the `trackingData` object's attributes returned from the push notification's payload. [Learn more](https://support.dynamicyield.com/hc/en-us/articles/14365496351901-Getting-Started-with-Reconnect#h_01HHHJW6R5AZ7MZ663DE0KKT7J). */
                            events?: {
                                /** @example 101482916 */
                                ver?: string;
                                /** @example 4032971100745578591 */
                                expVisitId?: string;
                                /** @example  */
                                smech?: string;
                                vars?: string[];
                                /** @example 1296028 */
                                exp?: string;
                                /** @example 1 */
                                mech?: string;
                            }[];
                        };
                    })[];
                }) | {
                    user: {
                        /**
                         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                         * @default true
                         */
                        sharedDevice: boolean;
                    } | (unknown & {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    } & {
                        /**
                         * @description Set to `false` for transactions made on personal devices.
                         * @default false
                         */
                        sharedDevice: boolean;
                    });
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context?: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /** @description Use to recommend only items in stock at the branch the user is browsing. */
                        branch: {
                            /** @description The ID of the branch the recommendation is for. */
                            id: string;
                            /**
                             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                             * @enum {string}
                             */
                            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                        };
                        /**
                         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                         * @enum {string}
                         */
                        channel: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                    };
                    /** @description Report the [type of engagement](https://dy.dev/docs/engagement#types-of-engagement) with a reference to the content or recommendation that the user engaged with. */
                    engagements: ({
                        /**
                         * @description Pass `SLOT_CLICK`.
                         * @enum {string}
                         */
                        type: "SLOT_CLICK";
                        /** @description Use to report a click on an API recommendation. Pass the Slot ID for the clicked product as returned in the `/choose` response. */
                        slotId: string;
                    } | {
                        /**
                         * @description Pass `SLOT_IMP`.
                         * @enum {string}
                         */
                        type: "SLOT_IMP";
                        /** @description Use to report impressions of an API recommendation. Pass the Slot IDs for the products as returned in the `/choose` response. */
                        slotIds: string[];
                    })[];
                };
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Engagements reported successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
            /** @description Unauthorized request. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error code.
                         * @example 401
                         */
                        error?: string;
                    };
                };
            };
            /** @description Invalid request. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    trackEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-cart-v1`.
                             * @default add-to-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event in the actual payment currency. This is the total value of the cart purchased, not just a triggering item.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 98.8
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `remove-from-cart-v1`.
                             * @default remove-from-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sync-cart-v1`.
                             * @default sync-cart-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `identify-v1`.
                             * @default identify-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `login-v1`.
                             * @default login-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `signup-v1`. */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `newsletter-subscription-v1`.
                             * @default newsletter-subscription-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optin-v1`.
                             * @default message-optin-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optout-v1`.
                             * @default message-optout-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `keyword-search-v1`.
                             * @default keyword-search-v1
                             */
                            dyType: string;
                            /**
                             * @description The search string.
                             * @example contact info
                             */
                            keywords: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-wishlist-v1`.
                             * @default add-to-wishlist-v1
                             */
                            dyType: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            /**
                             * @description Product size.
                             * @example L
                             */
                            size?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `filter-items-v1`.
                             * @default filter-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                             * @example color
                             */
                            filterType: string;
                            /**
                             * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                             * @example 20
                             */
                            filterNumericValue?: number;
                            /**
                             * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                             * @example Gray
                             */
                            filterStringValue?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `change-attribute-v1`.
                             * @default change-attr-v1
                             */
                            dyType: string;
                            /**
                             * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                             * @example Color
                             */
                            attributeType: string;
                            /**
                             * @description The new value (for example, new color is Gray).
                             * @example Navy Blue
                             */
                            attributeValue: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `video-watch-v1`.
                             * @default video-watch-v1
                             */
                            dyType: string;
                            /**
                             * @description ID that matches an item ID in the content feed.
                             * @example 33849492012003
                             */
                            itemId: string;
                            /**
                             * @description *Optional*
                             * @example [
                             *       "Sports",
                             *       "Baseball"
                             *     ]
                             */
                            categories?: string[];
                            /**
                             * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                             * @default false
                             */
                            autoplay: boolean;
                            /**
                             * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                             * @example VIDEO_STARTED
                             * @enum {string}
                             */
                            progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                            /**
                             * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                             * @example 65
                             */
                            progressPercent: number;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sort-items-v1`.
                             * @default sort-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                             * @example price
                             */
                            sortBy: string;
                            /**
                             * @description `ASC` or `DESC`.
                             * @example ASC
                             */
                            sortOrder: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `enter-promo-code-v1`.
                             * @default enter-promo-code-v1
                             */
                            dyType: string;
                            /**
                             * @description The promo code.
                             * @example SPECIALOFFER
                             */
                            code: string;
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    })[];
                } | {
                    /**
                     * User
                     * @description User ID. A Dynamic Yield-generated identifier is used, and managed via cookies.
                     */
                    user: {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For new users not assigned a `dyid`, use a `choose` call to generate one. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    };
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device?: {
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                        };
                        /**
                         * @description Report and monitor each channel’s Experience API implementation. The channel corresponds to the Experience OS app used (`WEB` or `APP`), and the values are available for filtering in the API logs.
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP";
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-cart-v1`.
                             * @default add-to-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `remove-from-cart-v1`.
                             * @default remove-from-cart-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            quantity: number & unknown;
                            cart?: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sync-cart-v1`.
                             * @default sync-cart-v1
                             */
                            dyType: string;
                            value: number & unknown;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            cart: unknown & {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId?: string;
                                /**
                                 * @description Number of items.
                                 * @example 1
                                 */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                            }[];
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `identify-v1`.
                             * @default identify-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `login-v1`.
                             * @default login-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `signup-v1`. */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `newsletter-subscription-v1`.
                             * @default newsletter-subscription-v1
                             */
                            dyType: string;
                            /**
                             * @description User identifier value. Max 250 characters.
                             * @enum {string}
                             */
                            cuid?: "demo@email.com" | "123456789";
                            /** @description Use this identifier type to identify users across devices (for example, `customer_id`, `account_id`, or `he` for SHA-256 hashed email).<br>**Note: Do not include any personal information in this ID.** */
                            cuidType?: string;
                            secondaryIdentifiers?: {
                                /** @example hashedPhoneNumber */
                                type?: string;
                                /** @example 49c7b1f6d24121078d8f37997b433586fe9a28e2dc4fbd0803eac237ac82255e */
                                value?: string;
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optin-v1`.
                             * @default message-optin-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `message-optout-v1`.
                             * @default message-optout-v1
                             */
                            dyType: string;
                            /**
                             * @description Reports that a user opted in to receive Reconnect push notifications.
                             * @example f7a8c987-7ab5-400f-b989-5357af507343
                             */
                            pushId: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `keyword-search-v1`.
                             * @default keyword-search-v1
                             */
                            dyType: string;
                            /**
                             * @description The search string.
                             * @example contact info
                             */
                            keywords: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `add-to-wishlist-v1`.
                             * @default add-to-wishlist-v1
                             */
                            dyType: string;
                            /** @description SKU exactly as it appears in the product feed. */
                            productId: string;
                            /**
                             * @description Product size.
                             * @example L
                             */
                            size?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `filter-items-v1`.
                             * @default filter-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Name of the filter (color, size, brand, fit, author, keyword, category...)<br>Must correspond to a product property in your product feed.
                             * @example color
                             */
                            filterType: string;
                            /**
                             * @description Specify a value for this property **OR** for `filterStringValue`, but not both. This affects how segmentation conditions are run.
                             * @example 20
                             */
                            filterNumericValue?: number;
                            /**
                             * @description Specify a value for this property **OR** for `filterNumericValue`, but not both. This affects how segmentation conditions are run.
                             * @example Gray
                             */
                            filterStringValue?: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `change-attribute-v1`.
                             * @default change-attr-v1
                             */
                            dyType: string;
                            /**
                             * @description Color, size, fit, brand, author, keyword, category, or any other attribute you allow.
                             * @example Color
                             */
                            attributeType: string;
                            /**
                             * @description The new value (for example, new color is Gray).
                             * @example Navy Blue
                             */
                            attributeValue: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `video-watch-v1`.
                             * @default video-watch-v1
                             */
                            dyType: string;
                            /**
                             * @description ID that matches an item ID in the content feed.
                             * @example 33849492012003
                             */
                            itemId: string;
                            /**
                             * @description *Optional*
                             * @example [
                             *       "Sports",
                             *       "Baseball"
                             *     ]
                             */
                            categories?: string[];
                            /**
                             * @description Indicates whether the video played automatically (`true`) or due to user action (`false` (default)).
                             * @default false
                             */
                            autoplay: boolean;
                            /**
                             * @description Possible values:<br><ul><li>`VIDEO_STARTED` (default): The video started playing. It doesn't indicate whether it was then watched till the end or up to any specific marker.</li><li>`PREROLL_FINISHED`: the pre-roll was watched in full.</li><li>`VIDEO_FINISHED`: The content was watched in full (whether or not a pre-roll was included)</li><li>`VIDEO_PROGRESS`: If the client can periodically report fine-grained progress in percentages within the video, use this value together with the `progressPercent` property.</li></ul>
                             * @example VIDEO_STARTED
                             * @enum {string}
                             */
                            progress: "VIDEO_STARTED" | "PREROLL_FINISHED" | "VIDEO_FINISHED" | "VIDEO_PROGRESS";
                            /**
                             * @description Indicates how much of a video was watched as a percentage.<br>*Use only with the `progress` value of `VIDEO_PROGRESS`*
                             * @example 65
                             */
                            progressPercent: number;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `sort-items-v1`.
                             * @default sort-items-v1
                             */
                            dyType: string;
                            /**
                             * @description Sorting parameter, such as price, age, popularity, rating, or any other you allow.
                             * @example price
                             */
                            sortBy: string;
                            /**
                             * @description `ASC` or `DESC`.
                             * @example ASC
                             */
                            sortOrder: string;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `enter-promo-code-v1`.
                             * @default enter-promo-code-v1
                             */
                            dyType: string;
                            /**
                             * @description The promo code.
                             * @example SPECIALOFFER
                             */
                            code: string;
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    })[];
                } | {
                    user: {
                        /**
                         * @description Set to `true` for transactions done on a shared device in a branch (always `true` for kiosk and ODMB).
                         * @default true
                         */
                        sharedDevice: boolean;
                    } | (unknown & {
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid?: string;
                        /** @description The _dyid cookie value. The user ID assigned to visitors by Dynamic Yield. For a new user, send this param empty. Learn more about the [user ID](https://dy.dev/docs/experience-api-basics#user-id). */
                        dyid_server?: string;
                        /**
                         * @description Add this attribute only if [active cookie consent](https://dy.dev/docs/active-cookie-consent) is enabled. Set to `true` if user gave consent for cookies.
                         * @default false
                         */
                        active_consent_accepted?: boolean;
                    } & {
                        /**
                         * @description Set to `false` for transactions made on personal devices.
                         * @default false
                         */
                        sharedDevice: boolean;
                    });
                    /**
                     * Session
                     * @description Session ID. A Dynamic Yield-generated identifier is used.
                     */
                    session: {
                        /** @description Pass the value of the `_dyjsession` cookie if it exists. Otherwise, a new session identifier will be created by Dynamic Yield and returned in the response. */
                        dy?: string;
                    };
                    /**
                     * Context
                     * @description The request's context.
                     */
                    context: {
                        /** @description Data for the served device. */
                        device: {
                            /**
                             * @description Use when the user agent isn't available. Valid values are:<br>`DESKTOP`, `SMARTPHONE`, `TABLET`, `KIOSK`, `ODMB`
                             * @enum {string}
                             */
                            type: "DESKTOP" | "SMARTPHONE" | "TABLET" | "KIOSK" | "ODMB";
                            /**
                             * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                             * @example 54.100.200.255
                             */
                            ip?: string;
                            /** @description The identifier of the device in the branch. */
                            id?: string;
                            /**
                             * @description Date & time in ISO 8601 format: YYYY-MM-DDThh:mm:ss.sss±hh:mm (with local time zone).
                             * @example 2024-01-01T22:30:00.000-05:00
                             */
                            dateTime?: string;
                        };
                        /** @description Use to recommend only items in stock at the branch the user is browsing. */
                        branch: {
                            /** @description The ID of the branch the recommendation is for. */
                            id: string;
                            /**
                             * @description Define the period of the day the request ralates to. Possible values are those used in the Product Catalog.
                             * @enum {string}
                             */
                            dayPart: "BREAKFAST" | "LUNCH" | "DINNER" | "LATENIGHT";
                            /**
                             * @description The fulfillment type of the order the request relates to.
                             * @enum {string}
                             */
                            orderFulfillment?: "DELIVERY" | "PICKUP" | "DINEIN" | "CURBSIDE";
                        };
                        /**
                         * @description Report and monitor each channel's experience API implementation. Channels correspond to the Experience OS app used. Available channels: `WEB`, `APP`, `KIOSK`, `DRIVE-THRU`
                         * @enum {string}
                         */
                        channel?: "WEB" | "APP" | "KIOSK" | "DRIVE-THRU";
                    };
                    /** @description One or more events to report. */
                    events: {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /**
                             * @description Must be `purchase-v1`.
                             * @default purchase-v1
                             */
                            dyType: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description When this value is passed it ensures that only one purchase is recorded for the transaction ID, even if duplicate events are reported.<br>Maximum of 64 characters.<br>*Optional, but recommended*
                             * @example 38373991919193830033
                             */
                            uniqueTransactionId?: string;
                            cart: unknown & {
                                /** @description The product ID from the restaurant product catalog. */
                                productId: string;
                                /** @description Number of items. */
                                quantity?: number;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                itemPrice?: number;
                                /** @description Indicate any inner products within the main product (for example, the individual products that make up a meal, or any extras/toppings). All inner products are listed at the same hierarchical level, even if they are a component of a component (say, extra cheese on a sandwich that is part of a meal). */
                                innerProducts?: {
                                    /** @description The product ID from the restaurant product catalog. */
                                    productId: string;
                                    /** @description Number of items. */
                                    quantity?: number;
                                    /**
                                     * @description unit.cents format using the section default currency.
                                     * @example 23.99
                                     */
                                    itemPrice?: number;
                                }[];
                            }[];
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Events reported successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
            /** @description Unauthorized request. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error code.
                         * @example 401
                         */
                        error?: string;
                    };
                };
            };
            /** @description Invalid request. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    updateProductFeed: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the feed.
                 * @example 85915
                 */
                feedId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "value": {
                 *         "requests": [
                 *           {
                 *             "id": "abc-123",
                 *             "action": "UPDATE",
                 *             "body": {
                 *               "data": {
                 *                 "sku": "abc-123",
                 *                 "group_id": "abc",
                 *                 "url": "http://www.example.com/abc-123",
                 *                 "name": "white sneakers",
                 *                 "price": 29.99,
                 *                 "in_stock": true,
                 *                 "image_url": "http://www.example.com/abc-123.png",
                 *                 "categories": "shoes|sneakers",
                 *                 "description": "The white sneakers that everybody wants",
                 *                 "publish_time": "2018-02-12T17:05:12",
                 *                 "keywords": "tag1|tag2",
                 *                 "any_other_field": "any other value"
                 *               }
                 *             }
                 *           },
                 *           {
                 *             "id": "abcd-123",
                 *             "action": "delete"
                 *           },
                 *           {
                 *             "id": "abcde-123",
                 *             "action": "partial",
                 *             "body": {
                 *               "data": {
                 *                 "price": 39.99
                 *               }
                 *             }
                 *           }
                 *         ]
                 *       }
                 *     } */
                "application/json": {
                    /** @description A list of product feed action requests. */
                    requests: {
                        /** @description SKU exactly as it appears in the product feed. */
                        id: string;
                        /**
                         * @description Type of action requested. Valid values are:<ul>`update` - Insert a new product or rewrite an entire product’s data<br>`partial` - Update specific fields for a single product<br>`delete` - Delete a product</ul>
                         * @enum {string}
                         */
                        action: "update" | "partial" | "delete";
                        /** @description Single request body. */
                        body?: {
                            /** @description Product data. */
                            data?: {
                                /** @description SKU exactly as it appears in the product feed. */
                                sku?: string;
                                /**
                                 * @description Product group ID.
                                 * @example abc
                                 */
                                group_id?: string;
                                /**
                                 * @description Product details page URL (must be a valid URL, starting with HTTP/HTTPS).
                                 * @example http://www.example.com/abc-123
                                 */
                                url?: string;
                                /**
                                 * @description Product name.
                                 * @example white sneakers
                                 */
                                name?: string;
                                /**
                                 * @description unit.cents format using the section default currency.
                                 * @example 23.99
                                 */
                                price?: number;
                                /**
                                 * @description Whether the product is in stock or in outage.
                                 * @example true
                                 */
                                in_stock?: boolean;
                                /**
                                 * @description Product image URL.
                                 * @example http://www.example.com/abc-123.png
                                 */
                                image_url?: string;
                                /**
                                 * @description Categories the product belongs to.
                                 * @example shoes|sneakers
                                 */
                                categories?: string;
                                /**
                                 * @description Product description.
                                 * @example The white sneakers that everybody wants
                                 */
                                description?: string;
                                /**
                                 * @description Date & time the product was published (added to feed or edited), using the following format: `yyyy-MM-dd'T'HH:mm:ss`
                                 * @example 2018-02-12T17:05:12
                                 */
                                publish_time?: string;
                                /**
                                 * @description A list of keywords describing the product.
                                 * @example tag1|tag2
                                 */
                                keywords?: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Product feed udpated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The update request's success status.
                         * @example true
                         */
                        success?: boolean;
                        /** @description Response body. */
                        data?: {
                            /**
                             * @description The ID for the update transaction. A transaction includes all individual items for which an update was requested.
                             * @example 3754b085584be8561926dabc32b359a0
                             */
                            transaction_id?: string;
                        };
                    };
                };
            };
        };
    };
    trackTransactionStatusSpecificItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the feed.
                 * @example 85915
                 */
                feedId: string;
                /**
                 * @description The ID of the transaction received from an API call.
                 * @example MDcyNWM0MTEtYWZlZS00MjdkLWExYmYtMDlhMWIwNGFjMzg4LWZpZC0yMTYxNi10cy0xNTg2NjgxOTE0MDYwLXQtcGFydGlhbA
                 */
                transactionId: string;
                /**
                 * @description The ID of the item.
                 * @example abc-123
                 */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "value": {
                     *         "item": "abc-123",
                     *         "status": "success",
                     *         "time": "2023-03-30T08:20:35.827+0000"
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description The request item's ID.
                         * @example abc-123
                         */
                        item?: string;
                        /**
                         * @description Whether the item has been successfully updated.
                         * @example success
                         */
                        status?: string;
                        /**
                         * @description Timestamp for most recent status change.
                         * @example 2023-03-30T08:20:35.827+0000
                         */
                        time?: string;
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    trackTransactionStatusWholeTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the feed.
                 * @example 85915
                 */
                feedId: string;
                /**
                 * @description The ID of the transaction received from an API call.
                 * @example MDcyNWM0MTEtYWZlZS00MjdkLWExYmYtMDlhMWIwNGFjMzg4LWZpZC0yMTYxNi10cy0xNTg2NjgxOTE0MDYwLXQtcGFydGlhbA
                 */
                transactionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "value": [
                     *         {
                     *           "item": "abc-123",
                     *           "status": "success",
                     *           "time": "2023-03-30T08:20:35.827+0000"
                     *         },
                     *         {
                     *           "item": "abcde-123",
                     *           "status": "failed",
                     *           "time": "2023-03-30T08:20:23.324+0000",
                     *           "message": "failed"
                     *         },
                     *         {
                     *           "item": "abcd-123",
                     *           "status": "success",
                     *           "time": "2023-03-30T08:20:30.005+0000",
                     *           "message": "Item missing"
                     *         }
                     *       ]
                     *     } */
                    "application/json": ({
                        /**
                         * @description The request item's ID.
                         * @example abc-123
                         */
                        item?: string;
                        /**
                         * @description Whether the item has been successfully updated.
                         * @example success
                         */
                        status?: string;
                        /**
                         * @description Timestamp for most recent status change.
                         * @example 2023-03-30T08:20:35.827+0000
                         */
                        time?: string;
                    } & {
                        [key: string]: unknown;
                    })[];
                };
            };
        };
    };
    updateBranchFeed: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The branch ID.
                 * @example 4012
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A list of products to be updated. */
                    products: {
                        /**
                         * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                         * @example A123
                         */
                        sku: string;
                        /**
                         * @description Whether the product is available in the specific branch or not. Unavailable products will not be recommended.
                         * @example true
                         */
                        availability: boolean;
                        /**
                         * @description The price of the product that is used in the specific branch.
                         * @example 3.14
                         */
                        price: number;
                        /** @description A local variation of the product name, if exists in the specific branch. */
                        name?: string;
                        /** @description The SKUs of all the products that can be added onto the main product, and the permitted quantities. */
                        addons?: {
                            /**
                             * @description The SKU (unique identifier) of the product. These SKUs must exist in the global product feed.
                             * @example A123
                             */
                            sku: string;
                            /**
                             * @description The default quantity of this ingredient (add on) inside the parent product.
                             * @example 1
                             */
                            default_quantity?: number;
                            /**
                             * @description The minimum quantity of this ingredient (add on) inside the parent product.
                             * @example 0
                             */
                            min_quantity?: number;
                            /**
                             * @description The maximum quantity of this ingredient (add on) inside the parent product.
                             * @example 3
                             */
                            max_quantity?: number;
                            /**
                             * @description The amount from which the QSR is going to charge for the addition of the add on.
                             * @example 1
                             */
                            charge_threshold?: number;
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Branch feed uploaded successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error description.
                         * @example request must contain context page location
                         */
                        message?: string;
                        /**
                         * @description The type of error encountered.
                         * @example badRequest
                         */
                        type?: string;
                    };
                };
            };
            /** @description Branch not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content - in the case of application/gzip content-type, the file is corrupt and cannot be unzipped. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reportOutages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A list of outage reports per branch. */
                    outages: {
                        /** @description The ID of the branch the recommendation is for. */
                        branchId: string;
                        /** @description A list of out-of-stock product IDs */
                        products: string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Success. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    userDataApi: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The data feed key. To get the key of an existing data feed, go to the data feed in Experience OS, click Edit, and copy the key.
                 * @example 114f64059571a124de146311f2256f2
                 */
                feedKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "value": {
                 *         "requests": [
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "myuser123",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2021-07-24T13:44:17+02:00",
                 *             "data": {
                 *               "VIP": "T",
                 *               "contacts_buyer": "T",
                 *               "premium_score": 0.8,
                 *               "segment_name": null,
                 *               "last_visit": "2020-05-16T05:50:06-05:00"
                 *             }
                 *           },
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "myuser456",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2021-07-24T13:45:52+02:00",
                 *             "data": {
                 *               "VIP": "F",
                 *               "contacts_buyer": "T",
                 *               "premium_score": 0.3
                 *             }
                 *           },
                 *           {
                 *             "action": "upsert",
                 *             "cuid": "0c907031b7d6515ce8def68a767272d0ec7225e987c3e0ce70b985c265f318f0",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2023-07-02T10:44:44+02:00",
                 *             "data": {
                 *               "UserSegments": [
                 *                 "segment 1",
                 *                 "segment 2"
                 *               ]
                 *             }
                 *           },
                 *           {
                 *             "action": "delete",
                 *             "cuid": "myuser789",
                 *             "cuidtype": "ihe",
                 *             "timestamp": "2022-05-24T12:31:09+02:00"
                 *           }
                 *         ]
                 *       }
                 *     } */
                "application/json": {
                    /** @description A list of user data update requests to be executed. */
                    requests: ({
                        /**
                         * @description Use `upsert` to add user data.
                         * @example upsert
                         * @enum {string}
                         */
                        action: "upsert";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                        /** @description Add CRM data here. Date values within the CRM Data should be date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp. */
                        data: {
                            [key: string]: unknown;
                        };
                    } | {
                        /**
                         * @description Use `delete` to remove data.
                         * @example delete
                         * @enum {string}
                         */
                        action: "delete";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                    } | {
                        /**
                         * @description Use `array_add` and `array_remove` to edit data in existing arrays.
                         * @example array_add
                         * @enum {string}
                         */
                        action: "array_add" | "array_remove";
                        cuid: ("demo@email.com" | "123456789") & unknown;
                        cuidtype: string & unknown & unknown;
                        /**
                         * Format: date-time
                         * @description Date & time in ISO 8601 format, with or without milliseconds (YYYY-MM-DDThh:mm:ssTZD or YYYY-MM-DDThh:mm:ss.sTZD ), expressed either in UTC or in local time. Alternatively, you can use an epoch timestamp.
                         * @example 2021-07-24T13:44:17+02:00
                         */
                        timestamp: string;
                        data: {
                            [key: string]: string[];
                        } | {
                            [key: string]: number[];
                        };
                    })[];
                };
            };
        };
        responses: {
            /** @description User data updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Response with error. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    externalEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User's identifying details. */
                    user: {
                        /**
                         * @description User identifier value. Max 250 characters.
                         * @enum {string}
                         */
                        cuid: "demo@email.com" | "123456789";
                        cuidType: string & unknown;
                    };
                    /** @description Data for the served device. */
                    device?: {
                        /**
                         * @description The client IP address, for geolocation-based targeting and audience building. If not passed, the caller IP is used.
                         * @example 54.100.200.255
                         */
                        ip?: string;
                    };
                    /** @description One or more events to report. */
                    events: ({
                        /** @description A human-readable name corresponding to the schema name. */
                        name: string;
                        properties: Record<string, never> & {
                            /**
                             * @description Must be `offline-purchase-v1`.
                             * @default offline-purchase-v1
                             * @example offline-purchase-v1
                             */
                            dyType: string;
                            uniqueTransactionId: string & unknown;
                            /**
                             * @description The source where the transaction occurred, usually the physical store ID.
                             * @example f877e8a9dbb
                             */
                            transactionSource?: string;
                            /**
                             * @description The date and time of the purchase in **ISO 8601 combined date and time** format.
                             * @example 2018-09-23T07:29:51+00:00
                             */
                            transactionDatetime: string;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                            /**
                             * @description The total monetary value of the event. This is the item or items added that triggered the event only, not necessarily all items in the cart.<br>Numbers are rounded to the nearest 0.01. Numbers smaller than 0.005 are rounded down to 0.
                             * @example 19.9
                             */
                            value: number;
                            cart: {
                                /** @description SKU exactly as it appears in the product feed. */
                                productId: string;
                                /** @description Number of items. */
                                quantity: number;
                                itemPrice: number & unknown;
                                /**
                                 * @description Value of the line item in actual payment currency.<br>The value is the product of `itemPrice` times `quantity`, after discount and taxes.<br>Negative values are ignored.<br>Required if the `value` property is not defined. Otherwise, it's optional.
                                 * @example 23.99
                                 */
                                transactionItemValue: number;
                                /**
                                 * @description Product size.
                                 * @example L
                                 */
                                size?: string;
                                /** @description **For restaurants only.** Indicate any inner products within the main product. */
                                innerProducts?: {
                                    /** @description SKU exactly as it appears in the product feed. */
                                    productId: string;
                                    /** @description Number of items. */
                                    quantity?: number;
                                    /**
                                     * @description unit.cents format using the section default currency.
                                     * @example 23.99
                                     */
                                    itemPrice?: number;
                                }[];
                            }[] & unknown;
                        };
                    } | {
                        /** @description A human-readable name corresponding to the schema name. */
                        name?: string;
                        properties?: Record<string, never> & {
                            /** @description Must be `inform-affinity-v1`. */
                            dyType: string;
                            /** @description The source of the user data */
                            source?: string;
                            /** @description An array of attributes and values.<br><strong>Important:</strong> Reported attributes and values must be an exact match to the product feed<br>Each item in the array includes an attribute and up to 10 values:<br><br>- attribute: "name of attribute"<br>- values: ["value1", "value2"...] */
                            data: {
                                /** @description name of attribute */
                                attribute?: unknown;
                                values?: string[];
                            }[];
                        };
                    } | {
                        /**
                         * @description Event name for display. Does not have a `dyType` property.
                         * @example VIP Login
                         */
                        name: string;
                        /** @description Properties can be strings, numbers, or Boolean. Note that we don't support nested properties when creating targeting rules over custom events. */
                        properties?: {
                            /**
                             * @description Indicates the monetary value of the event, with or without the optional currency designation. Use for goals based on events.
                             * @example 98.7
                             */
                            value?: number;
                            /**
                             * @description The currency used for the value. *Optional, but required for multi-currency sites.*<br>[List of supported currencies](https://support.dynamicyield.com/hc/en-us/articles/360022558254#h_01F248KMJV1VWADRC2H7WYFWCZ)
                             * @example USD
                             */
                            currency?: string;
                        } & {
                            [key: string]: string | number | boolean;
                        };
                    })[];
                };
            };
        };
        responses: {
            /** @description User data updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Response with error. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    profileAnywhere: {
        parameters: {
            query: {
                /**
                 * @description The user's unique identifier.
                 * @example 13510582476552222
                 */
                cuid: string;
                /** @description Use `he` for hashed email addresses or use your custom identifier type. */
                cuidType: string;
                /**
                 * @description Whether to receive affinity data for the user.
                 * @example true
                 */
                affinity: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
